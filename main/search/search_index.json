{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMAS Standard Names","text":"<p>Welcome to the IMAS Standard Names documentation. This project defines a structured, machine-parseable naming convention for fusion data variables.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Grammar Reference - Complete auto-generated grammar vocabulary and rules</li> <li>Guidelines - Naming conventions and best practices</li> <li>Specification - Formal grammar specification and validation rules</li> <li>Quick Start - Step-by-step guide to adding new standard names</li> <li>Style Guide - Detailed authoring guidelines</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The IMAS Standard Names system provides:</p> <ul> <li>Deterministic parsing of variable names into structured components</li> <li>Controlled vocabularies for segments (components, subjects, positions, processes, basis)</li> <li>Validation rules to ensure consistency and correctness</li> <li>Single source of truth in <code>grammar.yml</code> with auto-generated code and documentation</li> </ul>"},{"location":"#grammar-summary","title":"Grammar Summary","text":"<p>The canonical naming pattern:</p> <pre><code>[component_] [subject_] base [in_&lt;basis&gt;_basis] [of_&lt;target&gt; | at_&lt;position&gt;] [due_to_&lt;process&gt;]\n</code></pre>"},{"location":"#current-vocabularies","title":"Current Vocabularies","text":"Vocabulary Token Count Usage <code>components</code> 12 Vector component directions <code>subjects</code> 9 Particle species or plasma subjects <code>basis</code> 4 Coordinate system bases <code>positions</code> 16 Spatial locations or regions <code>processes</code> 26 Physical processes or mechanisms <p>See the Grammar Reference for complete details on all vocabularies, segment rules, and examples.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Review the Grammar Reference to understand available vocabularies</li> <li>Follow the Quick Start guide to create your first standard name</li> <li>Consult the Guidelines for naming conventions</li> <li>Use the Style Guide for detailed authoring rules</li> </ol>"},{"location":"#standard-names-catalog","title":"Standard Names Catalog","text":"<p>The current catalog of standard names is maintained in <code>imas_standard_names/resources/standard_names/</code> with individual YAML files organized by domain:</p> <ul> <li>magnetic_field/ - Magnetic field vectors and components</li> <li>plasma/ - Plasma parameters (temperature, density, etc.)</li> <li>equilibrium/ - Equilibrium reconstruction quantities</li> </ul> <p>For programmatic access to the catalog, use the Python API:</p> <pre><code>from imas_standard_names.repository import StandardNameRepository\n\nrepo = StandardNameRepository()\nname = repo.get(\"electron_temperature\")\nprint(f\"{name.unit}: {name.description}\")\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See Contributing Guidelines for information on proposing new standard names or modifications to the grammar.</p>"},{"location":"grammar-reference/","title":"Grammar Reference (Auto-Generated)","text":"<p>!!! info \"Single Source of Truth\" This page is automatically generated from <code>imas_standard_names/resources/grammar.yml</code> and reflects the current authoritative grammar at build time.</p> <pre><code>**All content on this page is generated programmatically** \u2014 do not edit manually.\n</code></pre>"},{"location":"grammar-reference/#overview","title":"Overview","text":"<p>The IMAS Standard Names grammar defines a structured, deterministic naming convention for fusion data variables. Names are composed of segments in a fixed order, with each segment drawing from controlled vocabularies.</p>"},{"location":"grammar-reference/#vocabularies-summary","title":"Vocabularies Summary","text":"Vocabulary Token Count Usage <code>components</code> 12 Vector component directions <code>subjects</code> 9 Particle species or plasma subjects <code>basis</code> 4 Coordinate system bases <code>positions</code> 16 Spatial locations or regions <code>processes</code> 26 Physical processes or mechanisms"},{"location":"grammar-reference/#segment-order","title":"Segment Order","text":"<p>The canonical order for constructing standard names:</p> <pre><code>component \u2192 subject \u2192 base \u2192 geometry \u2192 position \u2192 process \u2192 basis\n</code></pre> <p>Where:</p> <ul> <li>component (optional)</li> <li>subject (optional)</li> <li>base (required)</li> <li>geometry (optional) - template: <code>of_{token}</code></li> <li>position (optional) - template: <code>at_{token}</code></li> <li>process (optional) - template: <code>due_to_{token}</code></li> <li>basis (optional) - template: <code>in_{token}_basis</code></li> </ul>"},{"location":"grammar-reference/#segment-rules","title":"Segment Rules","text":"<p>Detailed rules for each segment, including optionality, templates, and exclusivity constraints:</p> Segment Required Template Vocabulary Exclusive With <code>component</code> No \u2014 components <code>basis</code> <code>subject</code> No \u2014 subjects \u2014 <code>base</code> Yes \u2014 (dynamic) \u2014 <code>geometry</code> No <code>of_{token}</code> positions <code>position</code> <code>position</code> No <code>at_{token}</code> positions <code>geometry</code> <code>process</code> No <code>due_to_{token}</code> processes \u2014 <code>basis</code> No <code>in_{token}_basis</code> basis <code>component</code>"},{"location":"grammar-reference/#vocabularies","title":"Vocabularies","text":""},{"location":"grammar-reference/#components","title":"Components","text":"<p>Component tokens specify the direction of vector components. The available components depend on the coordinate basis being used.</p> Token <code>radial</code> <code>toroidal</code> <code>vertical</code> <code>parallel</code> <code>diamagnetic</code> <code>normal</code> <code>tangential</code> <code>binormal</code> <code>x</code> <code>y</code> <code>z</code> <code>poloidal</code>"},{"location":"grammar-reference/#subjects","title":"Subjects","text":"<p>Subject tokens specify the particle species or plasma component:</p> Token <code>electron</code> <code>ion</code> <code>deuterium</code> <code>tritium</code> <code>helium</code> <code>impurity_species</code> <code>fast_ion</code> <code>neutral</code> <code>runaway_electron</code>"},{"location":"grammar-reference/#basis","title":"Basis","text":"<p>Basis tokens specify the coordinate system:</p> Token <code>cylindrical</code> <code>field_aligned</code> <code>cartesian</code> <code>poloidal</code>"},{"location":"grammar-reference/#positions","title":"Positions","text":"<p>Position tokens specify spatial locations or regions within the plasma:</p> Token <code>last_closed_flux_surface</code> <code>first_wall</code> <code>limiter</code> <code>plasma_boundary</code> <code>divertor_target</code> <code>inner_divertor_target</code> <code>outer_divertor_target</code> <code>magnetic_axis</code> <code>current_center</code> <code>inner_midplane</code> <code>outer_midplane</code> <code>core_region</code> <code>edge_region</code> <code>scrape_off_layer</code> <code>divertor_region</code> <code>closest_wall_point</code>"},{"location":"grammar-reference/#processes","title":"Processes","text":"<p>Process tokens specify physical mechanisms or processes:</p> Token <code>conduction</code> <code>convection</code> <code>diffusion</code> <code>neoclassical</code> <code>turbulent</code> <code>anomalous</code> <code>ohmic</code> <code>electron_cyclotron_heating</code> <code>ion_cyclotron_heating</code> <code>lower_hybrid_current_drive</code> <code>neutral_beam_injection</code> <code>electron_cyclotron_current_drive</code> <code>radiation</code> <code>recombination</code> <code>ionization</code> <code>charge_exchange</code> <code>induction</code> <code>bootstrap</code> <code>resistive</code> <code>viscous</code> <code>magnetohydrodynamic</code> <code>external_coil</code> <code>eddy_current</code> <code>passive_structure</code> <code>disruption</code> <code>halo</code>"},{"location":"grammar-reference/#basis-component-mappings","title":"Basis Component Mappings","text":"<p>Each coordinate basis defines which component tokens are valid:</p> Basis Description Components <code>cylindrical</code> Cylindrical machine coordinates <code>radial</code>, <code>toroidal</code>, <code>vertical</code> <code>field_aligned</code> Directions aligned to or derived from the magnetic field <code>parallel</code>, <code>diamagnetic</code>, <code>normal</code>, <code>tangential</code>, <code>binormal</code> <code>cartesian</code> Standard Cartesian axes <code>x</code>, <code>y</code>, <code>z</code> <code>poloidal</code> Poloidal plane directions <code>radial</code>, <code>vertical</code>"},{"location":"grammar-reference/#exclusivity-rules","title":"Exclusivity Rules","text":"<p>Certain segments cannot appear together in the same standard name:</p> <ul> <li><code>basis</code> and <code>component</code> are mutually exclusive</li> <li><code>geometry</code> and <code>position</code> are mutually exclusive</li> </ul>"},{"location":"grammar-reference/#examples","title":"Examples","text":""},{"location":"grammar-reference/#valid-names","title":"Valid Names","text":"<p>Using the grammar rules above, here are examples of valid standard names:</p> <p>Base scalars:</p> <ul> <li><code>electron_temperature</code> \u2014 simple subject + base</li> <li><code>ion_density</code> \u2014 subject + base</li> </ul> <p>Components:</p> <ul> <li><code>radial_component_of_magnetic_field</code> \u2014 component + vector</li> <li><code>toroidal_component_of_plasma_velocity</code> \u2014 component + vector</li> </ul> <p>With position:</p> <ul> <li><code>electron_temperature_at_plasma_boundary</code> \u2014 scalar + position</li> <li><code>radial_component_of_magnetic_field_at_magnetic_axis</code> \u2014 component + vector + position</li> </ul> <p>With process:</p> <ul> <li><code>heat_flux_due_to_conduction</code> \u2014 scalar + process</li> <li><code>particle_flux_due_to_diffusion</code> \u2014 scalar + process</li> </ul> <p>With basis:</p> <ul> <li><code>radial_component_of_magnetic_field_in_cylindrical_basis</code> \u2014 component + vector + basis</li> </ul> <p>Complex:</p> <ul> <li><code>electron_temperature_at_outer_midplane_due_to_electron_cyclotron_heating</code> \u2014 subject + base + position + process</li> </ul>"},{"location":"grammar-reference/#invalid-names","title":"Invalid Names","text":"<p>Examples that violate the grammar:</p> <p>\u274c <code>magnetic_field_radial_component</code> \u2014 component must come first \u274c <code>at_plasma_boundary_electron_temperature</code> \u2014 segments out of order \u274c <code>radial_component_in_cylindrical_basis</code> \u2014 both component and basis (exclusive) \u274c <code>electron_temperature_at_plasma_boundary_of_magnetic_axis</code> \u2014 both position and geometry (exclusive)</p>"},{"location":"grammar-reference/#grammar-version","title":"Grammar Version","text":"<p>Grammar version: 0.1.dev1+g72272d869</p>"},{"location":"grammar-reference/#parser-implementation","title":"Parser Implementation","text":"<p>The grammar is implemented in the following modules:</p> <ul> <li>Grammar Specification: <code>imas_standard_names/resources/grammar.yml</code></li> <li>Type Generation: <code>imas_standard_names/grammar_codegen/generate.py</code></li> <li>Runtime Types: <code>imas_standard_names/grammar/types.py</code> (auto-generated)</li> <li>Parser/Composer: <code>imas_standard_names/grammar/support.py</code></li> <li>Pydantic Models: <code>imas_standard_names/grammar/model.py</code></li> </ul> <p>See the specification for detailed semantic rules and validation requirements.</p>"},{"location":"guidelines/","title":"Guidelines for Construction of IMAS Standard Names","text":"<p>!!! info \"Complete Reference\" For auto-generated vocabulary tables and formal specification, see the Grammar Reference.</p>"},{"location":"guidelines/#basic-rules","title":"Basic Rules","text":"<p>Standard names follow these fundamental requirements:</p> Rule Description Example Characters Lowercase letters, digits, underscores only <code>electron_temperature</code> \u2713<code>Electron_Temperature</code> \u2717 Start Must begin with a letter <code>temperature</code> \u2713<code>1_temperature</code> \u2717 Spelling Use US spelling <code>analyze</code>, <code>center</code> Units Never include units in the name <code>temperature</code> \u2713<code>temperature_ev</code> \u2717 Order Follow fixed segment order (see below) Must respect grammar"},{"location":"guidelines/#grammar-structure","title":"Grammar Structure","text":"<p>Standard names are constructed from segments in a fixed order:</p> <pre><code>component \u2192 subject \u2192 base \u2192 geometry \u2192 position \u2192 process \u2192 basis\n</code></pre> <p>Where:</p> <ul> <li>component (optional)</li> <li>subject (optional)</li> <li>base (required)</li> <li>geometry (optional) - template: <code>of_{token}</code></li> <li>position (optional) - template: <code>at_{token}</code></li> <li>process (optional) - template: <code>due_to_{token}</code></li> <li>basis (optional) - template: <code>in_{token}_basis</code></li> </ul>"},{"location":"guidelines/#segment-descriptions","title":"Segment Descriptions","text":"<p>!!! info \"Auto-Generated Vocabularies\" Token lists below are generated from <code>grammar.yml</code>. See Grammar Reference for complete tables.</p> Segment Required Description Tokens component No Vector component direction <code>radial</code>, <code>toroidal</code>, <code>vertical</code>, <code>parallel</code>, <code>diamagnetic</code>, <code>normal</code>, <code>tangential</code>, <code>binormal</code>, <code>x</code>, <code>y</code>, <code>z</code>, <code>poloidal</code> subject No Particle species or plasma subject <code>electron</code>, <code>ion</code>, <code>deuterium</code>, <code>tritium</code>, <code>helium</code>, <code>impurity_species</code>, <code>fast_ion</code>, <code>neutral</code>, <code>runaway_electron</code> base Yes Physical quantity or transformed expression User-defined (e.g., <code>temperature</code>, <code>pressure</code>, <code>gradient_of_temperature</code>) basis No Coordinate system (template: <code>in_{token}_basis</code>) <code>cylindrical</code>, <code>field_aligned</code>, <code>cartesian</code>, <code>poloidal</code> geometry No Geometric target (template: <code>of_{token}</code>) <code>last_closed_flux_surface</code>, <code>first_wall</code>, <code>limiter</code>, <code>plasma_boundary</code>, <code>divertor_target</code>, <code>inner_divertor_target</code>, <code>outer_divertor_target</code>, <code>magnetic_axis</code>, <code>current_center</code>, <code>inner_midplane</code>, <code>outer_midplane</code>, <code>core_region</code>, <code>edge_region</code>, <code>scrape_off_layer</code>, <code>divertor_region</code>, <code>closest_wall_point</code> position No Spatial location (template: <code>at_{token}</code>) <code>last_closed_flux_surface</code>, <code>first_wall</code>, <code>limiter</code>, <code>plasma_boundary</code>, <code>divertor_target</code>, <code>inner_divertor_target</code>, <code>outer_divertor_target</code>, <code>magnetic_axis</code>, <code>current_center</code>, <code>inner_midplane</code>, <code>outer_midplane</code>, <code>core_region</code>, <code>edge_region</code>, <code>scrape_off_layer</code>, <code>divertor_region</code>, <code>closest_wall_point</code> process No Physical mechanism (template: <code>due_to_{token}</code>) <code>conduction</code>, <code>convection</code>, <code>diffusion</code>, <code>neoclassical</code>, <code>turbulent</code>, <code>anomalous</code>, <code>ohmic</code>, <code>electron_cyclotron_heating</code>, <code>ion_cyclotron_heating</code>, <code>lower_hybrid_current_drive</code>, <code>neutral_beam_injection</code>, <code>electron_cyclotron_current_drive</code>, <code>radiation</code>, <code>recombination</code>, <code>ionization</code>, <code>charge_exchange</code>, <code>induction</code>, <code>bootstrap</code>, <code>resistive</code>, <code>viscous</code>, <code>magnetohydrodynamic</code>, <code>external_coil</code>, <code>eddy_current</code>, <code>passive_structure</code>, <code>disruption</code>, <code>halo</code>"},{"location":"guidelines/#exclusivity-rules","title":"Exclusivity Rules","text":"<p>Certain segments cannot coexist in the same name:</p> <ul> <li><code>basis</code> and <code>component</code> are mutually exclusive</li> <li><code>geometry</code> and <code>position</code> are mutually exclusive</li> </ul>"},{"location":"guidelines/#examples","title":"Examples","text":"Valid Name Segments Used Explanation <code>electron_temperature</code> subject + base Simple scalar <code>radial_component_of_magnetic_field</code> component + base Vector component <code>electron_temperature_at_plasma_boundary</code> subject + base + position Scalar at location <code>heat_flux_due_to_conduction</code> base + process Process contribution <code>radial_magnetic_field_in_cylindrical_basis</code> component + base + basis Component with explicit basis"},{"location":"guidelines/#grammar-source","title":"Grammar Source","text":"<p>Single source of truth: <code>imas_standard_names/resources/grammar.yml</code></p> <p>Code generation:</p> <ul> <li>Auto-generates: <code>imas_standard_names/grammar/types.py</code> (Python enums)</li> <li>Triggers: Automatically during build/install via Hatch</li> <li>Manual: <code>python -m imas_standard_names.grammar_codegen.generate</code> or <code>build-grammar</code></li> </ul>"},{"location":"guidelines/#vocabulary-details","title":"Vocabulary Details","text":""},{"location":"guidelines/#components","title":"Components","text":"<p>Component tokens specify vector directions. Available components depend on the coordinate basis:</p> Basis Description Components <code>cylindrical</code> Cylindrical machine coordinates <code>radial</code>, <code>toroidal</code>, <code>vertical</code> <code>field_aligned</code> Directions aligned to or derived from the magnetic field <code>parallel</code>, <code>diamagnetic</code>, <code>normal</code>, <code>tangential</code>, <code>binormal</code> <code>cartesian</code> Standard Cartesian axes <code>x</code>, <code>y</code>, <code>z</code> <code>poloidal</code> Poloidal plane directions <code>radial</code>, <code>vertical</code> <p>All component tokens:</p> Token <code>radial</code> <code>toroidal</code> <code>vertical</code> <code>parallel</code> <code>diamagnetic</code> <code>normal</code> <code>tangential</code> <code>binormal</code> <code>x</code> <code>y</code> <code>z</code> <code>poloidal</code> <p>Consistency rules:</p> <ul> <li>Component tokens must match the declared or implied basis</li> <li>Do not mix component vocabularies (e.g., no <code>x</code> with cylindrical basis)</li> </ul> <p>Examples:</p> <ul> <li><code>radial_component_of_magnetic_field</code> \u2014 cylindrical component</li> <li><code>x_component_of_electric_field</code> \u2014 Cartesian component</li> <li><code>parallel_heat_flux</code> \u2014 field-aligned component</li> </ul>"},{"location":"guidelines/#subjects","title":"Subjects","text":"<p>Subject tokens identify particle species or plasma populations:</p> Token <code>electron</code> <code>ion</code> <code>deuterium</code> <code>tritium</code> <code>helium</code> <code>impurity_species</code> <code>fast_ion</code> <code>neutral</code> <code>runaway_electron</code> <p>Examples:</p> <ul> <li><code>electron_temperature</code> \u2014 electron quantity</li> <li><code>ion_density</code> \u2014 ion quantity</li> <li><code>deuterium_velocity</code> \u2014 specific isotope</li> </ul>"},{"location":"guidelines/#positions","title":"Positions","text":"<p>Position tokens (template: <code>at_{token}</code>) specify spatial locations:</p> Token <code>last_closed_flux_surface</code> <code>first_wall</code> <code>limiter</code> <code>plasma_boundary</code> <code>divertor_target</code> <code>inner_divertor_target</code> <code>outer_divertor_target</code> <code>magnetic_axis</code> <code>current_center</code> <code>inner_midplane</code> <code>outer_midplane</code> <code>core_region</code> <code>edge_region</code> <code>scrape_off_layer</code> <code>divertor_region</code> <code>closest_wall_point</code> <p>Examples:</p> <ul> <li><code>temperature_at_plasma_boundary</code> \u2014 at last closed flux surface</li> <li><code>pressure_at_magnetic_axis</code> \u2014 on-axis value</li> <li><code>density_at_outer_midplane</code> \u2014 at specific location</li> </ul>"},{"location":"guidelines/#processes","title":"Processes","text":"<p>Process tokens (template: <code>due_to_{token}</code>) identify physical mechanisms. Use when naming a single contribution term in a sum:</p> Token <code>conduction</code> <code>convection</code> <code>diffusion</code> <code>neoclassical</code> <code>turbulent</code> <code>anomalous</code> <code>ohmic</code> <code>electron_cyclotron_heating</code> <code>ion_cyclotron_heating</code> <code>lower_hybrid_current_drive</code> <code>neutral_beam_injection</code> <code>electron_cyclotron_current_drive</code> <code>radiation</code> <code>recombination</code> <code>ionization</code> <code>charge_exchange</code> <code>induction</code> <code>bootstrap</code> <code>resistive</code> <code>viscous</code> <code>magnetohydrodynamic</code> <code>external_coil</code> <code>eddy_current</code> <code>passive_structure</code> <code>disruption</code> <code>halo</code> <p>Examples:</p> <ul> <li><code>heat_flux_due_to_conduction</code> \u2014 conductive contribution</li> <li><code>particle_flux_due_to_diffusion</code> \u2014 diffusive contribution</li> <li><code>heating_due_to_neutral_beam_injection</code> \u2014 NBI heating term</li> </ul>"},{"location":"guidelines/#basis","title":"Basis","text":"<p>Basis tokens (template: <code>in_{token}_basis</code>) specify coordinate systems:</p> Token <code>cylindrical</code> <code>field_aligned</code> <code>cartesian</code> <code>poloidal</code> <p>Usage:</p> <ul> <li>Primarily for vector forms with component dimension</li> <li>Rare for scalar quantities</li> <li>Must match component token vocabulary</li> </ul>"},{"location":"guidelines/#vector-representation","title":"Vector Representation","text":"<p>Vectors can be represented in two ways:</p>"},{"location":"guidelines/#1-component-form-recommended","title":"1. Component Form (Recommended)","text":"<p>Publish separate scalar variables for each component. The component token implies the basis.</p> <p>Available basis/component mappings:</p> Basis Description Components <code>cylindrical</code> Cylindrical machine coordinates <code>radial</code>, <code>toroidal</code>, <code>vertical</code> <code>field_aligned</code> Directions aligned to or derived from the magnetic field <code>parallel</code>, <code>diamagnetic</code>, <code>normal</code>, <code>tangential</code>, <code>binormal</code> <code>cartesian</code> Standard Cartesian axes <code>x</code>, <code>y</code>, <code>z</code> <code>poloidal</code> Poloidal plane directions <code>radial</code>, <code>vertical</code> <p>Examples:</p> Basis Component Names Unit Cartesian <code>x_magnetic_field</code>, <code>y_magnetic_field</code>, <code>z_magnetic_field</code> T Cylindrical <code>radial_magnetic_field</code>, <code>toroidal_magnetic_field</code>, <code>vertical_magnetic_field</code> T Field-aligned <code>parallel_heat_flux</code>, <code>perpendicular_heat_flux</code> W/m\u00b2"},{"location":"guidelines/#2-vector-form-single-array","title":"2. Vector Form (Single Array)","text":"<p>Publish single variable with component dimension. Include basis explicitly in name (template: <code>in_{basis}_basis</code>).</p> <p>Examples:</p> Vector Name Component Labels Notes <code>magnetic_field_in_cartesian_basis</code> <code>[\"x\", \"y\", \"z\"]</code> Explicit basis <code>magnetic_field_in_cylindrical_basis</code> <code>[\"radial\", \"toroidal\", \"vertical\"]</code> Can append position <code>magnetic_field_in_cylindrical_basis_at_plasma_boundary</code> <code>[\"radial\", \"toroidal\", \"vertical\"]</code> With position qualifier"},{"location":"guidelines/#vector-naming-rules","title":"Vector Naming Rules","text":"<ul> <li>\u2717 Never use the word \"vector\" in names \u2192 \u2713 Use component or basis forms</li> <li>\u2713 For magnitudes: <code>magnitude_of_magnetic_field</code> (scalar, not vector)</li> <li>\u2713 Component labels in vector form must match declared basis</li> <li>\u2717 Never mix component vocabularies in a single set</li> </ul>"},{"location":"guidelines/#transformations","title":"Transformations","text":"<p>Derive new standard names from existing ones by applying transformation operators. Transformations may change units. Multiple transformations can be chained.</p>"},{"location":"guidelines/#transformation-rules","title":"Transformation Rules","text":"Rule Units Meaning change_over_time_in_X [X] change in a quantity X over a time-interval. derivative_of_X_wrt_Y [X]/[Y] \\(\\frac{\\partial X}{\\partial Y}\\) (keeping any other independent variables constant, i.e. the partial derivative if appropriate). integral_of_Y_wrt_X [X]*[Y] \\(\\int Y dX\\). The data variable should have an axis for X specifying the limits of the integral as bounds. magnitude_of_X [X] magnitude of a vector X. product_of_X_and_Y [X]*[Y] \\(X \\cdot Y\\). If X and Y are both scalars or both components of vectors, they are put in alphabetical order. If one of them is the component of a vector, it is put first i.e. the vector component is X, the scalar is Y. ratio_of_X_to_Y [X]/[Y] \\(\\frac{X}{Y}\\). square_of_X [X]*[X] \\(X^2\\). tendency_of_X [X] s-1 derivative of X with respect to time."},{"location":"guidelines/#transformation-examples","title":"Transformation Examples","text":"Standard Name Transformation Description <code>gradient_of_temperature</code> gradient Spatial gradient <code>time_derivative_of_pressure</code> time derivative Rate of change <code>magnitude_of_magnetic_field</code> magnitude Vector magnitude (scalar) <code>integral_of_density_over_volume</code> integral Volume integration <code>ratio_of_thermal_pressure_to_magnetic_pressure</code> ratio Plasma beta <code>square_of_magnetic_field</code> square Squared quantity <code>normalized_temperature</code> normalized Dimensionless form <code>derivative_of_current_density_with_respect_to_radius</code> derivative w.r.t. Radial derivative"},{"location":"guidelines/#generic-quantity-names","title":"Generic Quantity Names","text":"<p>Generic names represent physical quantities with consistent units across the catalog. These are building blocks for standard names but are not themselves valid standard names.</p> Unit Generic Name <code>m^2</code> area <code>A</code> current <code>J</code> energy <code>s^-1</code> frequency <code>m^-3</code> number_density <code>W</code> power <code>Pa</code> pressure <code>K</code> or <code>eV</code>[^1] temperature <code>m.s^-1</code> velocity <code>m^3</code> volume"},{"location":"guidelines/#unit-conventions","title":"Unit Conventions","text":"Quantity Type Unit Examples Plasma temperatures eV <code>electron_temperature</code>, <code>ion_temperature</code> Material temperatures K <code>wall_temperature</code>, <code>coil_temperature</code> Magnetic field T <code>toroidal_magnetic_field</code> Density m\u207b\u00b3 <code>electron_density</code>, <code>ion_density</code> Energy J <code>plasma_energy</code>, <code>kinetic_energy</code>"},{"location":"guidelines/#quick-reference","title":"Quick Reference","text":"<p>For complete vocabulary tables and formal specification: See Grammar Reference</p> <p>For step-by-step creation guide: See Quick Start</p> <p>For detailed authoring rules: See Style Guide</p> <p>For formal grammar and validation: See Specification</p>"},{"location":"provenance/","title":"Provenance Schema Reference","text":"<p>This document describes the unified <code>provenance</code> block used across derived standard names. It replaces earlier ad hoc <code>derivation</code> / <code>parent_operation</code> fields and provides a single structured container for expressing how a quantity was produced.</p>"},{"location":"provenance/#modes","title":"Modes","text":"mode Description Typical Kind operator One or more chained operators on a base derived_scalar/vector reduction Scalar reduction over a vector expression derived_scalar expression Explicit algebraic combination derived_scalar"},{"location":"provenance/#common-fields","title":"Common Fields","text":"Field Applies to Description <code>mode</code> all One of <code>operator</code>, <code>reduction</code>, <code>expression</code>. <code>base</code> operator/reduction Root quantity the chain applies to. <code>operators</code> operator Ordered list of operator identifiers. <code>operator_id</code> operator Canonical id of the outermost operator. <code>reduction</code> reduction Reduction kind (e.g. <code>magnitude</code>). <code>domain</code> reduction Domain / qualifier for reduction (e.g. <code>none</code>). <code>expression</code> expression Algebraic expression string. <code>inputs</code> expression List of input standard names referenced."},{"location":"provenance/#examples","title":"Examples","text":""},{"location":"provenance/#operator-chain-vector-vector","title":"Operator Chain (Vector \u2192 Vector)","text":"<pre><code>name: curl_of_magnetic_field\nkind: derived_vector\nframe: cylindrical_r_tor_z\nunit: T.m^-1\nprovenance:\n  mode: operator\n  operators: [curl]\n  base: magnetic_field\n  operator_id: curl\ncomponents:\n  radial: radial_component_of_curl_of_magnetic_field\n  toroidal: toroidal_component_of_curl_of_magnetic_field\n  vertical: vertical_component_of_curl_of_magnetic_field\nstatus: draft\n</code></pre>"},{"location":"provenance/#magnitude-reduction-vector-scalar","title":"Magnitude Reduction (Vector \u2192 Scalar)","text":"<pre><code>name: magnitude_of_magnetic_field\nkind: derived_scalar\nunit: T\nprovenance:\n  mode: reduction\n  reduction: magnitude\n  domain: none\n  base: magnetic_field\nstatus: draft\n</code></pre>"},{"location":"provenance/#expression-scalar-combination","title":"Expression (Scalar Combination)","text":"<pre><code>name: weighted_average_electron_temperature\nkind: derived_scalar\nunit: keV\nprovenance:\n  mode: expression\n  expression: (a*core_electron_temperature + b*edge_electron_temperature)/(a+b)\n  inputs:\n    - core_electron_temperature\n    - edge_electron_temperature\nstatus: draft\n</code></pre>"},{"location":"provenance/#guidelines","title":"Guidelines","text":"<ul> <li>Keep <code>operators</code> list normalized (lowercase identifiers).</li> <li>Prefer <code>reduction: magnitude</code> over manual sqrt-of-sum-of-squares expressions.</li> <li>Use <code>expression</code> mode sparingly; whenever an operator or reduction form exists, prefer structured representation.</li> <li>Avoid nesting a scalarizing reduction inside an operator chain unless physically required.</li> </ul>"},{"location":"provenance/#validation-notes","title":"Validation Notes","text":"<p>Current validation enforces only basic structural correctness (vector component existence and magnitude base). Future extensions will add:</p> <ul> <li>Rank checking across operator chains.</li> <li>Dimension/unit inference consistency.</li> <li>Cycle detection in <code>expression</code> inputs.</li> </ul> <p>This reference will evolve; keep provenance blocks minimal and precise.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>This guide starts with scalars (atomic building blocks) and then covers vectors (structured aggregations) that use the uniform component grammar. If you are defining simple physical scalars, Section 1 may be sufficient.</p>"},{"location":"quickstart/#1-adding-a-base-scalar-atomic-quantity","title":"1. Adding a Base Scalar (Atomic Quantity)","text":""},{"location":"quickstart/#11-simple-physical-scalar","title":"1.1 Simple Physical Scalar","text":"<p>Choose a concise, lowercase, underscore-delimited name capturing the quantity unambiguously (avoid frame or axis qualifiers unless intrinsic):</p> <p>Example file: <code>standard_names/electron/electron_temperature.yml</code></p> <pre><code>name: electron_temperature\nkind: scalar\nunit: keV # pick canonical unit; validators will check format\ndescription: Electron temperature.\nstatus: draft\n</code></pre> <p>Guidelines:</p> <ul> <li>Use singular nouns where the quantity is a field value (temperature not temperatures).</li> <li>Avoid embedding coordinate system (prefer metadata or separate coordinate vars).</li> <li>Do not prefix with measurement method; use a tag or metadata field instead (future schema extension).</li> </ul>"},{"location":"quickstart/#12-time-derivative-of-a-scalar","title":"1.2 Time Derivative of a Scalar","text":"<p>For scalar \u2192 scalar with time derivative, prepend <code>time_derivative_of_</code>.</p> <p><code>standard_names/electron/time_derivative_of_electron_temperature.yml</code></p> <pre><code>name: time_derivative_of_electron_temperature\nkind: derived_scalar\nunit: keV.s^-1\nderivation:\n  operator_chain:\n    - operator: time_derivative\n      operand: electron_temperature\n  dependencies:\n    - electron_temperature\ndescription: Temporal derivative of electron_temperature.\nstatus: draft\n</code></pre>"},{"location":"quickstart/#13-gradient-of-a-scalar-produces-a-vector","title":"1.3 Gradient of a Scalar (Produces a Vector)","text":"<p>Gradient changes rank (scalar \u2192 vector). Skip to the vector section below using <code>gradient_of_&lt;scalar&gt;</code> as the vector name (kind: derived*vector) and add components: <code>&lt;axis&gt;\\_component_of_gradient_of*&lt;scalar&gt;</code>.</p>"},{"location":"quickstart/#14-derived-scalar-from-a-vector","title":"1.4 Derived Scalar from a Vector","text":"<p>If you need divergence of a velocity vector: <code>divergence_of_plasma_velocity</code> (kind: derived_scalar) \u2014 ensure a parent vector exists.</p>"},{"location":"quickstart/#15-naming-antipatterns-for-scalars","title":"1.5 Naming Anti\u2011Patterns for Scalars","text":"Invalid Reason Correct <code>electron_temperature_time_derivative</code> Suffix pattern <code>time_derivative_of_electron_temperature</code> <code>gradient_of_electron_temperature_radial_component</code> Gradient makes vector; component form wrong <code>radial_component_of_gradient_of_electron_temperature</code> <code>electron_temperature_magnitude</code> Magnitude reserved for vectors (omit)"},{"location":"quickstart/#16-minimal-template-base-scalar","title":"1.6 Minimal Template (Base Scalar)","text":"<pre><code>name: &lt;quantity&gt;\nkind: scalar\nunit: &lt;unit&gt;\ndescription: &lt;one sentence&gt;\nstatus: draft\n</code></pre>"},{"location":"quickstart/#17-minimal-template-derived-scalar-from-vector","title":"1.7 Minimal Template (Derived Scalar from Vector)","text":"<pre><code>name: divergence_of_&lt;vector&gt;\nkind: derived_scalar\nunit: &lt;unit&gt;\nparent_operation:\n  operator: divergence\n  operand_vector: &lt;vector&gt;\ndependencies:\n  - &lt;vector_component_1&gt;\n  - &lt;vector_component_2&gt;\n  - &lt;vector_component_3&gt;\nstatus: draft\n</code></pre> <p>Run the validator after adding any new scalar.</p>"},{"location":"quickstart/#18-scalar-cheat-sheet","title":"1.8 Scalar Cheat Sheet","text":"<pre><code>Base scalar: &lt;noun_phrase&gt;\nTime derivative: time_derivative_of_&lt;scalar&gt;\nVector gradient (see vectors): gradient_of_&lt;scalar&gt;\nScalar from vector divergence: divergence_of_&lt;vector&gt;\nScalar from vector magnitude (vector \u2192 scalar): magnitude_of_&lt;vector_expression&gt;  # canonical (suffix form deprecated)\n</code></pre>"},{"location":"quickstart/#2-adding-a-new-vector-with-uniform-components","title":"2. Adding a New Vector with Uniform Components","text":"<p>Goal: Define a new vector (e.g. <code>magnetic_field</code>) plus components and its magnitude in under two minutes.</p>"},{"location":"quickstart/#21-pick-define-frame","title":"2.1 Pick / Define Frame","text":"<p>Add or reuse a frame YAML in <code>frames/</code> (example: <code>cylindrical_r_tor_z.yml</code>).</p> <p>Minimal frame example:</p> <pre><code>frame: cylindrical_r_tor_z\ndimension: 3\naxes:\n  - name: radial\n  - name: toroidal\n  - name: vertical\nhandedness: right\nstatus: draft\n</code></pre>"},{"location":"quickstart/#22-create-domain-folder","title":"2.2 Create Domain Folder","text":"<pre><code>standard_names/magnetic_field/\n</code></pre>"},{"location":"quickstart/#23-vector-file","title":"2.3 Vector File","text":"<p><code>standard_names/magnetic_field/magnetic_field.yml</code></p> <pre><code>name: magnetic_field\nkind: vector\nframe: cylindrical_r_tor_z\nunit: T\ncomponents:\n  radial: radial_component_of_magnetic_field\n  toroidal: toroidal_component_of_magnetic_field\n  vertical: vertical_component_of_magnetic_field\nmagnitude: magnitude_of_magnetic_field\nstatus: draft\ndescription: Magnetic field vector in laboratory cylindrical coordinates.\n</code></pre>"},{"location":"quickstart/#24-component-files-one-per-axis","title":"2.4 Component Files (one per axis)","text":"<p>Example: <code>standard_names/magnetic_field/radial_component_of_magnetic_field.yml</code></p> <pre><code>name: radial_component_of_magnetic_field\nkind: scalar\nunit: T\nstatus: draft\ndescription: Radial component of magnetic_field.\n</code></pre> <p>Repeat for toroidal / vertical axes. Component membership is inferred purely from the uniform name pattern and the vector's <code>components</code> mapping.</p>"},{"location":"quickstart/#25-magnitude-file","title":"2.5 Magnitude File","text":"<p><code>standard_names/magnetic_field/magnitude_of_magnetic_field.yml</code></p> <pre><code>name: magnitude_of_magnetic_field\nkind: derived_scalar\nunit: T\nprovenance:\n  mode: reduction\n  reduction: magnitude\n  domain: none\n  base: magnetic_field\nstatus: draft\n</code></pre>"},{"location":"quickstart/#26-optional-derived-vector-curl","title":"2.6 (Optional) Derived Vector: Curl","text":"<p><code>standard_names/magnetic_field/curl_of_magnetic_field.yml</code></p> <pre><code>name: curl_of_magnetic_field\nkind: derived_vector\nframe: cylindrical_r_tor_z\nunit: T.m^-1\nprovenance:\n  mode: operator\n  operators: [curl]\n  base: magnetic_field\n  operator_id: curl\ncomponents:\n  radial: radial_component_of_curl_of_magnetic_field\n  toroidal: toroidal_component_of_curl_of_magnetic_field\n  vertical: vertical_component_of_curl_of_magnetic_field\nstatus: draft\n</code></pre> <p>Component example (derived scalar component):</p> <pre><code>name: radial_component_of_curl_of_magnetic_field\nkind: derived_scalar\nunit: T.m^-1\nprovenance:\n  mode: operator\n  operators: [curl]\n  base: radial_component_of_magnetic_field\n  operator_id: curl\nstatus: draft\ndescription: Radial component of curl_of_magnetic_field.\n</code></pre>"},{"location":"quickstart/#27-validate","title":"2.7 Validate","text":"<p>Run the catalog validator (structural + semantic):</p> <pre><code>validate_catalog resources/standard_names\n</code></pre> <p>If you don't have the console script (editable install not active), you can also invoke:</p> <pre><code>python -m imas_standard_names.validation.cli validate_catalog resources/standard_names\n</code></pre> <p>Resolve any reported issues shown. Exit code 0 means all checks passed; non-zero indicates problems (see messages for details).</p>"},{"location":"quickstart/#28-commit-document","title":"2.8 Commit &amp; Document","text":"<p>Add a short note in CHANGELOG if introducing a new vector domain.</p> <p>Done.</p>"},{"location":"quickstart/#3-vector-cheat-sheet-copypaste-snippets","title":"3. Vector Cheat Sheet (Copy\u2011Paste Snippets)","text":"<ul> <li>Component template:</li> </ul> <pre><code>name: &lt;axis&gt;_component_of_&lt;vector_expression&gt;\nkind: scalar # or derived_scalar\nunit: &lt;unit&gt;\nstatus: draft\ndescription: &lt;Axis&gt; component of &lt;vector_expression&gt;.\n</code></pre> <ul> <li>Derived vector template:</li> </ul> <pre><code>name: &lt;op&gt;_of_&lt;vector&gt;\nkind: derived_vector\nframe: &lt;frame&gt;\nunit: &lt;unit&gt;\nprovenance:\n  mode: operator\n  operators: [&lt;op&gt;]\n  base: &lt;vector&gt;\n  operator_id: &lt;op&gt;\ncomponents:\n  &lt;axis&gt;: &lt;axis&gt;_component_of_&lt;op&gt;_of_&lt;vector&gt;\n  ...\nstatus: draft\n</code></pre> <p>End of quick start.</p>"},{"location":"reductions/","title":"Reduction Provenance Grammar","text":"<p>This document describes the canonical reduction naming grammar and associated <code>provenance</code> metadata used by the IMAS Standard Names catalog. Reductions map a higher-rank or multi-component entity (vector field, time history, volume) to a scalar (or lower rank) quantity via a well-defined aggregation operation.</p>"},{"location":"reductions/#provenance-schema-mode-reduction","title":"Provenance Schema (mode: reduction)","text":"<pre><code>provenance:\n  mode: reduction            # Discriminator for ReductionProvenance\n  reduction: &lt;id&gt;            # One of: magnitude, time_average, root_mean_square, volume_integral (extensible)\n  domain: &lt;domain&gt;           # Aggregation domain: none | time | space | volume | ensemble | frequency | custom\n  base: &lt;standard_name&gt;      # The base standard name being reduced\n  # (Future) parameters: optional structured metadata (e.g., window, bounds)\n</code></pre>"},{"location":"reductions/#required-fields","title":"Required Fields","text":"<ul> <li><code>reduction</code>: Identifier registered in <code>REDUCTION_PATTERNS</code> (see <code>imas_standard_names/reductions.py</code>).</li> <li><code>domain</code>: Context of aggregation. Use <code>none</code> for reductions that purely collapse vector components (e.g., magnitude).</li> <li><code>base</code>: The standard name (vector, scalar, or derived type) that is the input to the reduction.</li> </ul>"},{"location":"reductions/#current-reduction-patterns","title":"Current Reduction Patterns","text":"Reduction Naming Pattern Prefix Domain Constraint Requires Vector Base Example Name magnitude <code>magnitude_of_</code> domain == none yes (vector) magnitude_of_magnetic_field time_average <code>time_average_of_</code> domain == time no time_average_of_electron_temperature (future) root_mean_square <code>root_mean_square_of_</code> domain in {time, ensemble, none} no root_mean_square_of_density_fluctuation (future) volume_integral <code>volume_integral_of_</code> domain == volume no volume_integral_of_radiated_power (future) <p>(Only <code>magnitude</code> is presently instantiated in the catalog; others are scaffolded for forward compatibility.)</p>"},{"location":"reductions/#naming-rules","title":"Naming Rules","text":"<ol> <li>The filesystem/YAML <code>name</code> MUST begin with the pattern prefix registered for the reduction.</li> <li>The substring following the prefix MUST equal the <code>base</code> name exactly.</li> <li><code>magnitude</code> reductions require that <code>base</code> resolves to a <code>derived_vector</code> or <code>vector</code> kind entry (enforced by upcoming validation helper).</li> <li>Reductions yield a scalar quantity; catalog entries should use <code>kind: derived_scalar</code>.</li> <li>Deprecated suffix magnitude forms have been removed from the catalog; always use <code>magnitude_of_&lt;base&gt;</code>.</li> </ol>"},{"location":"reductions/#migration-guidance","title":"Migration Guidance","text":"<ul> <li>Replace legacy fields (<code>parent_vector</code>, custom <code>derivation</code> expressions computing norms) with a reduction provenance block.</li> <li>Ensure associated vector entries retain a <code>magnitude: &lt;name&gt;</code> pointer for discoverability.</li> <li>If a previous magnitude entry included an analytic expression, retain it only if it conveys non-trivial semantics beyond the standard norm; otherwise remove to avoid duplication.</li> </ul>"},{"location":"reductions/#example-canonical-magnitude","title":"Example: Canonical Magnitude","text":"<pre><code>name: magnitude_of_magnetic_field\nkind: derived_scalar\nunit: T\nprovenance:\n  mode: reduction\n  reduction: magnitude\n  domain: none\n  base: magnetic_field\nstatus: draft\n</code></pre>"},{"location":"reductions/#removed-deprecated-suffix-forms","title":"(Removed) Deprecated Suffix Forms","text":"<p>Legacy suffix forms like <code>&lt;base&gt;_magnitude</code> have been fully removed. Tools should rely solely on the prefix grammar <code>magnitude_of_&lt;base&gt;</code>.</p>"},{"location":"reductions/#future-extensions","title":"Future Extensions","text":"<p>Planned enhancements:</p> <ul> <li>Parameterized reductions (e.g., time windows: <code>window: {start: t0, end: t1}</code>)</li> <li>Multi-stage reductions (e.g., time_average_of_magnitude_of_velocity_field) validated via recursive provenance inspection.</li> <li>Vector base validation helper (pending) to ensure correctness of magnitude bases.</li> </ul>"},{"location":"reductions/#validation-lifecycle","title":"Validation Lifecycle","text":"<ol> <li>Parse YAML into Pydantic model (<code>StandardName*</code>).</li> <li>If <code>provenance.mode == reduction</code>, apply <code>enforce_reduction_naming()</code>.</li> <li>(Upcoming) Post-catalog validation pass ensures structural integrity (vector existence, absence of circular reductions).</li> </ol>"},{"location":"reductions/#deprecation-policy","title":"Deprecation Policy","text":"<p>Any legacy or alternative pattern MUST:</p> <ul> <li>Set <code>status: deprecated</code>.</li> <li>Provide a note referencing the canonical form.</li> <li>Maintain functional provenance for backward compatibility until removal.</li> </ul>"},{"location":"reductions/#authoring-checklist","title":"Authoring Checklist","text":"<ul> <li>[ ] Name matches <code>&lt;pattern_prefix&gt;&lt;base&gt;</code>.</li> <li>[ ] <code>kind: derived_scalar</code> set.</li> <li>[ ] Units consistent with reduction semantics.</li> <li>[ ] <code>provenance.reduction</code> registered.</li> <li>[ ] <code>domain</code> aligned with pattern (magnitude -&gt; none).</li> <li>[ ] Vector entry lists this magnitude in its <code>magnitude:</code> field (if applicable).</li> <li>[ ] Deprecated variants clearly labeled.</li> </ul> <p>Revision: initial draft.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Status: living document (updated 2025-09-04)</p> <p>This roadmap translates current design decisions (uniform vector/component grammar, frames, operators, validation) into phased deliverables. Each phase has clear acceptance criteria and exit signals. Checklist items use GitHub style <code>[ ]</code> / <code>[x]</code> for quick visual scanning.</p>"},{"location":"roadmap/#vision","title":"Vision","text":"<p>Establish a rigorously validated, machine-parseable catalog of fusion data standard names (scalars + vectors + derived quantities) enabling:</p> <ul> <li>Deterministic semantic parsing of dataset variable names.</li> <li>Automated consistency validation (units, rank transitions, dependencies).</li> <li>Extensible transformation graph (operators) and coordinate frames.</li> <li>Sustainable governance workflow (issue \u2192 review \u2192 batch release).</li> </ul>"},{"location":"roadmap/#guiding-principles","title":"Guiding Principles","text":"<ol> <li>Uniformity over convenience (single component grammar).</li> <li>Atomic scalars; vectors aggregate semantics only.</li> <li>Left-to-right operator chains (parseable without recursion lookahead).</li> <li>Explicit rank semantics enforced in tooling.</li> <li>Incremental adoption: ship thin vertical slices early.</li> </ol>"},{"location":"roadmap/#phase-overview","title":"Phase Overview","text":"Phase Goal Key Deliverables Status Exit Criteria 0 Structure Seed spec + quickstart + roadmap + validator stub [x] Docs merged; stub validator runs clean 1 Equilibrium Core Set <code>magnetic_field</code> + equilibrium geometry + diagnostics frame [ ] Core attribute set &amp; maps validated 2 Operator Semantics Operator registry, rank-check validator extension [ ] Invalid chains rejected (tests) 3 Frame Registry <code>frames/</code> YAML schema + axis validation [ ] Components rejected if axis undeclared 4 Derived Graph Dependency closure + cycle detection in validator [ ] Cycles produce failing test 5 CLI &amp; CI Integration <code>validate_catalog</code> in pre-commit + CI gate [ ] PR fails on violation 6 Documentation Hardening Naming cheat sheet, FAQ, examples gallery [ ] Docs coverage: &gt;90% key concepts 7 Governance/Metadata Lifecycle states (draft, active, deprecated) + alias policy [ ] Deprecation test &amp; docs 8 Tensor / Higher Rank (Stretch) Draft tensor grammar &amp; pilot entries [ ] Prototype passes validator 9 Transformation Introspection Programmatic operator expansion API [ ] API returns chain metadata"},{"location":"roadmap/#detailed-milestones","title":"Detailed Milestones","text":""},{"location":"roadmap/#phase-1-equilibrium-core-attribute-set","title":"Phase 1 \u2013 Equilibrium Core Attribute Set","text":"<p>Objective: Capture the minimal but representative attribute surface required for magnetics-based equilibrium reconstruction (no plasma velocity yet). This seeds the catalog with vectors, geometry, coil &amp; diagnostic scalars, and field/flux maps.</p> <p>Checklist:</p> <ul> <li>[ ] Add <code>frames/cylindrical_r_tor_z.yml</code> (3 axes, right-handed).</li> <li>[ ] Add <code>standard_names/magnetic_field/</code> YAML set (components + magnitude + curl if practical).</li> <li>[ ] Add coil current &amp; geometry scalars (see list below).</li> <li>[ ] Add magnetic diagnostics (probe + flux loop) position/value scalars.</li> <li>[ ] Add first wall and plasma boundary outline coordinate sets.</li> <li>[ ] Add magnetic axis position scalars.</li> <li>[ ] Add poloidal flux map + magnetic field component maps (grid semantics documented).</li> <li>[ ] Add basic boundary shape scalars (elongation, triangularity, area, volume).</li> <li>[ ] Unit normalization check (T, Wb, A, m, m^2, m^3, dimensionless shape factors).</li> <li>[ ] Document MCP extraction usage in spec/README (ensure done\u2014see README update).</li> <li>[ ] Validator: tolerate map/grid arrays (no rank check yet) but enforce naming grammar.</li> </ul> <p>Acceptance: Validator returns 0 with all Phase 1 names present; sample MCP extraction script generates at least 80% of listed attributes from IMAS DD metadata.</p>"},{"location":"roadmap/#phase-1-target-attribute-list-concise","title":"Phase 1 Target Attribute List (Concise)","text":"Category Attributes (proposed standard names / patterns) Magnetic Coils <code>pf_coil_&lt;n&gt;_current</code>, <code>pf_coil_&lt;n&gt;_center_radial_position</code>, <code>pf_coil_&lt;n&gt;_center_vertical_position</code>, <code>pf_coil_&lt;n&gt;_center_toroidal_angle</code> (optional), <code>pf_coil_&lt;n&gt;_effective_area</code> (optional) Magnetic Probes <code>magnetic_probe_&lt;id&gt;_radial_position</code>, <code>magnetic_probe_&lt;id&gt;_vertical_position</code>, <code>magnetic_probe_&lt;id&gt;_toroidal_angle</code>, <code>magnetic_probe_&lt;id&gt;_normal_field</code>, <code>magnetic_probe_&lt;id&gt;_tangential_field</code> Flux Loops <code>flux_loop_&lt;id&gt;_radial_position</code>, <code>flux_loop_&lt;id&gt;_vertical_position</code>, <code>flux_loop_&lt;id&gt;_toroidal_angle</code> (if needed), <code>flux_loop_&lt;id&gt;_poloidal_flux</code> Field / Flux Maps <code>radial_component_of_magnetic_field</code> (gridded), <code>vertical_component_of_magnetic_field</code>, <code>toroidal_component_of_magnetic_field</code>, <code>magnetic_field_magnitude</code>, <code>poloidal_flux</code> Axis &amp; Geometry <code>magnetic_axis_radial_position</code>, <code>magnetic_axis_vertical_position</code>, <code>plasma_elongation</code>, <code>plasma_triangularity_upper</code>, <code>plasma_triangularity_lower</code>, <code>plasma_cross_section_area</code>, <code>plasma_volume</code> Boundaries / Walls <code>plasma_boundary_outline_radial_coordinates</code>, <code>plasma_boundary_outline_vertical_coordinates</code>, <code>first_wall_outline_radial_coordinates</code>, <code>first_wall_outline_vertical_coordinates</code>, <code>separatrix_outline_radial_coordinates</code> (if applicable), <code>separatrix_outline_vertical_coordinates</code> <p>Notes:</p> <ul> <li>Coordinate arrays (e.g. <code>*_outline_radial_coordinates</code>) will migrate to geometry container conventions in later phases; Phase 1 treats them as canonical array variables.</li> <li>Map variables (field/flux) supply grid axes separately (not enumerated here) \u2014 grid axis naming policy slated for later phase.</li> <li>Coil / probe / loop <code>&lt;id&gt;</code> realisation strategy: numeric indices (zero-padded optional) or facility-specific labels; enforce lowercase.</li> </ul> <p>Out of Scope for Phase 1:</p> <ul> <li>Plasma velocity (moved to future physical dynamics phase).</li> <li>Normalized or derived higher-order operators beyond curl/divergence.</li> <li>Tensor stresses or pressure anisotropy.</li> </ul> <p>MCP Extraction Guidance (summary; full text placed early in specification/README): Use the configured <code>imas</code> MCP server (see <code>.vscode/mcp.json</code>) to query the IMAS Data Dictionary for existing coil, probe, loop, and equilibrium data to seed YAML drafts automatically.</p>"},{"location":"roadmap/#phase-2-operator-semantics","title":"Phase 2 \u2013 Operator Semantics","text":"<p>Checklist:</p> <ul> <li>[ ] <code>operators/operators.yml</code> with rank in/out + scalarizing flag.</li> <li>[ ] Extend validator: parse operator chains, compute rank transitions.</li> <li>[ ] Add tests for allowed vs disallowed chains.</li> <li>[ ] Reject invalid: <code>curl_of_divergence_of_*</code>.</li> </ul> <p>Acceptance: Invalid chain test fails pre-change, passes post-change.</p>"},{"location":"roadmap/#phase-3-frame-registry","title":"Phase 3 \u2013 Frame Registry","text":"<p>Checklist:</p> <ul> <li>[ ] Frame YAML schema (frame id, axes[], handedness, dimension).</li> <li>[ ] Validator loads frames before vector validation.</li> <li>[ ] Components referencing undefined axis produce error.</li> <li>[ ] Add alternative frame (e.g. <code>cartesian_xyz</code>).</li> </ul> <p>Acceptance: Intentional bad axis triggers a single, clear validator error.</p>"},{"location":"roadmap/#phase-4-derived-graph-validation","title":"Phase 4 \u2013 Derived Graph Validation","text":"<p>Checklist:</p> <ul> <li>[ ] Build dependency graph from <code>derivation.dependencies</code>.</li> <li>[ ] Detect cycles; output condensed cycle path.</li> <li>[ ] Ensure magnitude lists every base component exactly once.</li> <li>[ ] Add unit propagation sanity hooks (optional warning phase).</li> </ul> <p>Acceptance: Introduced artificial cycle fails test; removing it passes.</p>"},{"location":"roadmap/#phase-5-cli-ci-integration","title":"Phase 5 \u2013 CLI &amp; CI Integration","text":"<p>Checklist:</p> <ul> <li>[ ] Add <code>scripts.py</code> entry <code>validate_catalog</code> calling validator.</li> <li>[ ] Pre-commit hook invoking validator.</li> <li>[ ] CI job blocking merge on validation failure.</li> <li>[ ] Short README section: \u201cValidation &amp; CI\u201d.</li> </ul> <p>Acceptance: Broken component pattern in PR fails CI automatically.</p>"},{"location":"roadmap/#phase-6-documentation-hardening","title":"Phase 6 \u2013 Documentation Hardening","text":"<p>Checklist:</p> <ul> <li>[ ] <code>docs/naming-cheatsheet.md</code> with high-density examples.</li> <li>[ ] <code>docs/faq.md</code> addressing common edge cases.</li> <li>[ ] Embedded diagrams (operator chain \u2192 rank transitions).</li> <li>[ ] Cross-links: quickstart \u2194 spec \u2194 roadmap.</li> </ul> <p>Acceptance: Manual doc audit\u2014no TODO markers left in core pages.</p>"},{"location":"roadmap/#phase-7-governance-lifecycle","title":"Phase 7 \u2013 Governance &amp; Lifecycle","text":"<p>Checklist:</p> <ul> <li>[ ] Add <code>lifecycle</code> field (draft|active|deprecated|superseded).</li> <li>[ ] Alias mechanism (<code>aliases:</code> list) with validator uniqueness check.</li> <li>[ ] Deprecation test: deprecated references warn; superseded requires replacement pointer.</li> <li>[ ] Documentation: deprecation migration path.</li> </ul> <p>Acceptance: Sample deprecated entry triggers expected warning classification.</p>"},{"location":"roadmap/#phase-8-tensor-higher-rank-stretch","title":"Phase 8 \u2013 Tensor / Higher Rank (Stretch)","text":"<p>Checklist:</p> <ul> <li>[ ] Draft grammar additions (<code>kind: tensor</code>).</li> <li>[ ] Pilot tensor (e.g. <code>stress_tensor</code>) + components.</li> <li>[ ] Validator ensures index ordering &amp; symmetry metadata (if provided).</li> </ul> <p>Acceptance: Prototype passes; invalid permutation flagged.</p>"},{"location":"roadmap/#phase-9-transformation-introspection","title":"Phase 9 \u2013 Transformation Introspection","text":"<p>Checklist:</p> <ul> <li>[ ] Provide API to expand derived name \u2192 operator chain structure.</li> <li>[ ] Expose via Python function (e.g. <code>resolve_chain(name)</code>).</li> <li>[ ] Unit tests for chain resolution edge cases.</li> </ul> <p>Acceptance: <code>resolve_chain(\"time_derivative_of_curl_of_magnetic_field\")</code> returns ordered list of operator dicts.</p>"},{"location":"roadmap/#backlog-unscoped","title":"Backlog (Unscoped)","text":"<ul> <li>Normalized variants with explicit denominator references.</li> <li>Unit dimensional analysis for composite derivations.</li> <li>Multi-language doc generation (internationalization).</li> <li>JSON schema export for external tooling.</li> <li>Web UI preview of vector/component graphs.</li> </ul>"},{"location":"roadmap/#technical-debt-cleanup-targets","title":"Technical Debt / Cleanup Targets","text":"Item Rationale Planned Phase Markdown lint tolerances Reduce distraction noise 6 Spec wording normalization Consistency across examples 6 Validator performance (batch parse) Scale to 10k names 5"},{"location":"roadmap/#risks-mitigations","title":"Risks &amp; Mitigations","text":"Risk Impact Mitigation Scope creep (tensor early) Delays vector stabilization Keep tensor in stretch phase 8 Inconsistent operator chain parsing Invalid catalogs in wild Central operator registry + tests (Phase 2) Axis naming drift across domains Ambiguous components Frame-enforced axis registry (Phase 3) Unvalidated derivation expressions Silent math errors Dependency + cycle checks first; expression parser later"},{"location":"roadmap/#success-metrics","title":"Success Metrics","text":"Metric Target (after Phase 6) Validator runtime &lt; 2s for 2k entries on laptop CI failure clarity Single-line per violation (no stack flood) Doc task completion (user study) &lt; 5 min to add new vector w/ curl Issue to merge (median) &lt; 7 days post-Phase 7"},{"location":"roadmap/#current-focus","title":"Current Focus","text":"<p>Entering Phase 1: implement frames and first two vectors; extend validator accordingly.</p> <p>End of roadmap.</p>"},{"location":"specification/","title":"IMAS Standard Names Specification","text":"<p>Status: draft (initial skeleton)</p> <p>This document defines the canonical naming grammar, roles, and validation invariants for the emerging vector\u2011aware standard names catalog. Sections marked (TBD) can evolve after initial vectors land.</p>"},{"location":"specification/#1-overview","title":"1. Overview","text":"<p>This specification treats scalars as the primary, atomic carriers of physical meaning. Almost every quantity (temperature, density, current, flux, axis position, shape parameter, diagnostic reading) is a scalar standard name. Vector standard names are a lightweight organizational layer that group existing scalar components; they never replace or diminish scalar semantics.</p> <p>You should first look for (or propose) scalar names. Introduce a vector name only when you need to express a coherent multi\u2011component physical field (e.g. <code>magnetic_field</code>) whose components already follow a consistent axis frame.</p> <p>Use the IMAS MCP server (configured in <code>.vscode/mcp.json</code>) to mine existing IMAS Data Dictionary content before proposing new scalar or vector names so the catalog reflects deployed diagnostics and equilibrium reconstructions.</p> <p>Section 2 establishes scalar naming rules. Section 3 then layers the uniform vector/component system on top of those, including transformation (operator) chains.</p>"},{"location":"specification/#2-scalar-standard-names","title":"2. Scalar Standard Names","text":"<p>Scalar names represent a single physical quantity or its derived transformation without embedding coordinate system, measurement method, or storage shape. Core rules:</p> Aspect Guidance Example Form Lowercase words separated by underscores <code>electron_temperature</code> Clarity Prefer explicit words over opaque abbreviations <code>ion_density</code> No frame tokens Omit axis names unless intrinsic <code>plasma_volume</code> Derivatives Prefix operator chain <code>time_derivative_of_electron_temperature</code> From vector Use scalarizing operator or canonical magnitude prefix <code>magnitude_of_</code> <code>divergence_of_magnetic_field</code>, <code>magnitude_of_magnetic_field</code> <p>Common scalar patterns:</p> <ul> <li>Physical state: <code>electron_temperature</code>, <code>ion_density</code>, <code>plasma_volume</code>.</li> <li>Diagnostic reading (generic physical quantity).</li> <li>Geometry / landmark: <code>magnetic_axis_radial_position</code>, <code>magnetic_axis_vertical_position</code>.</li> <li>Shape parameter: <code>plasma_elongation</code>, <code>plasma_triangularity_upper</code>.</li> <li>Flux / field map scalar: <code>poloidal_flux</code> (grid axes defined separately).</li> </ul> <p>Scalar anti\u2011patterns:</p> Invalid Issue Correct <code>electron_temperature_time_derivative</code> Suffix derivative form <code>time_derivative_of_electron_temperature</code> <code>magnetic_field_magnitude</code> Deprecated suffix magnitude form <code>magnitude_of_magnetic_field</code> <code>gradient_of_electron_temperature_radial_component</code> Gradient raises rank <code>radial_component_of_gradient_of_electron_temperature</code> <code>magnetic_probe_23_normal_field</code> Embeds instrument index (device-specific) <code>magnetic_probe_normal_field</code> (generic) <p>Gradients, curls, divergence, and similar operators may raise or lower rank. When they yield scalars (e.g. divergence) they simply produce another scalar name. When they yield vectors (e.g. gradient of a scalar), the resulting vector and its components use the vector layer (next section) but the scalar inputs remain the foundation.</p> <p>For extended scalar guidance (templates, validation hooks) see Section 12 and the <code>style-guide.md</code>.</p> <p>See also <code>provenance.md</code> for the unified derivation / operator / reduction schema.</p>"},{"location":"specification/#3-vector-component-system-layer-on-scalars","title":"3. Vector &amp; Component System (Layer on Scalars)","text":"<p>Vectors provide structured grouping of related scalar components plus optional derived vectors and scalars. Every vector is defined strictly by its scalar components; vectors do not introduce independent physical values.</p> <p>Uniform component pattern:</p> <pre><code>&lt;axis&gt;_component_of_&lt;vector_expression&gt;\n</code></pre> <p><code>&lt;vector_expression&gt;</code> may include a left\u2011to\u2011right operator chain, e.g. <code>time_derivative_of_curl_of_magnetic_field</code>.</p> <p>Each (base or derived) vector entry supplies:</p> <ul> <li>Vector standard name (e.g. <code>magnetic_field</code>).</li> <li>Mapping axis \u2192 component scalar names (<code>radial_component_of_magnetic_field</code>, ...).</li> <li>Optional magnitude scalar (<code>magnitude_of_magnetic_field</code>).</li> <li>Optional derived vectors (<code>curl_of_magnetic_field</code>).</li> </ul> <p>Vectors group semantics; components remain atomic scalars.</p>"},{"location":"specification/#4-design-principles","title":"4. Design Principles","text":"Principle Rationale Uniformity Single component pattern eliminates ambiguity. Atomicity Scalars carry direct numeric semantics; vectors reference them. Deterministic Parsing Names are machine decomposed with simple regex + operator table. Rank Safety Operators have explicit input/output ranks (vector \u2192 scalar etc.). Left\u2011to\u2011Right Composition Outermost operation first: <code>time_derivative_of_curl_of_B</code>. One Canonical Form Exactly one name per concept (no alternate alias field)."},{"location":"specification/#5-terminology-kinds","title":"5. Terminology &amp; Kinds","text":"Kind Meaning <code>scalar</code> Atomic physical scalar or base component. <code>derived_scalar</code> Scalar produced by an operator chain (e.g. magnitude, divergence). <code>vector</code> Base multi\u2011component quantity (e.g. <code>magnetic_field</code>). <code>derived_vector</code> Vector produced by applying operators (e.g. <code>curl_of_magnetic_field</code>). <code>frame</code> Structural definition of axes (external file in <code>frames/</code>). <code>operator</code> Transformation with rank signature (defined in <code>operators/operators.yml</code>)."},{"location":"specification/#6-naming-grammar-ebnf","title":"6. Naming Grammar (EBNF)","text":"<p>!!! info \"Auto-Generated Vocabularies\" The vocabularies below are automatically generated from <code>grammar.yml</code> at build time. For the complete grammar reference, see Grammar Reference.</p> <p>Current Vocabularies:</p>"},{"location":"specification/#components","title":"Components","text":"Token <code>radial</code> <code>toroidal</code> <code>vertical</code> <code>parallel</code> <code>diamagnetic</code> <code>normal</code> <code>tangential</code> <code>binormal</code> <code>x</code> <code>y</code> <code>z</code> <code>poloidal</code>"},{"location":"specification/#subjects","title":"Subjects","text":"Token <code>electron</code> <code>ion</code> <code>deuterium</code> <code>tritium</code> <code>helium</code> <code>impurity_species</code> <code>fast_ion</code> <code>neutral</code> <code>runaway_electron</code>"},{"location":"specification/#basis","title":"Basis","text":"Token <code>cylindrical</code> <code>field_aligned</code> <code>cartesian</code> <code>poloidal</code>"},{"location":"specification/#positions","title":"Positions","text":"Token <code>last_closed_flux_surface</code> <code>first_wall</code> <code>limiter</code> <code>plasma_boundary</code> <code>divertor_target</code> <code>inner_divertor_target</code> <code>outer_divertor_target</code> <code>magnetic_axis</code> <code>current_center</code> <code>inner_midplane</code> <code>outer_midplane</code> <code>core_region</code> <code>edge_region</code> <code>scrape_off_layer</code> <code>divertor_region</code> <code>closest_wall_point</code>"},{"location":"specification/#processes","title":"Processes","text":"Token <code>conduction</code> <code>convection</code> <code>diffusion</code> <code>neoclassical</code> <code>turbulent</code> <code>anomalous</code> <code>ohmic</code> <code>electron_cyclotron_heating</code> <code>ion_cyclotron_heating</code> <code>lower_hybrid_current_drive</code> <code>neutral_beam_injection</code> <code>electron_cyclotron_current_drive</code> <code>radiation</code> <code>recombination</code> <code>ionization</code> <code>charge_exchange</code> <code>induction</code> <code>bootstrap</code> <code>resistive</code> <code>viscous</code> <code>magnetohydrodynamic</code> <code>external_coil</code> <code>eddy_current</code> <code>passive_structure</code> <code>disruption</code> <code>halo</code> <p>Condensed from the detailed discussion; see <code>docs/naming-cheatsheet.md</code> (future).</p> <pre><code>&lt;standard_name&gt; ::= &lt;vector_name&gt;\n                  | &lt;component_name&gt;\n                  | &lt;derived_scalar_name&gt;\n                  | &lt;derived_vector_name&gt;\n\n&lt;vector_name&gt; ::= &lt;base_quantity&gt;\n&lt;base_quantity&gt; ::= &lt;word&gt; (\"_\" &lt;word&gt; )*\n&lt;word&gt; ::= [a-z][a-z0-9]*\n\n&lt;axis&gt; ::= radial|toroidal|vertical|poloidal|parallel|perpendicular1|perpendicular2|x|y|z|&lt;custom_axis&gt;\n&lt;custom_axis&gt; ::= &lt;word&gt;\n\n&lt;component_name&gt; ::= &lt;axis&gt; \"_component_of_\" &lt;vector_expression&gt;\n\n&lt;vector_expression&gt; ::= &lt;vector_name&gt;\n                      | &lt;operator_chain&gt; \"_of_\" &lt;vector_name&gt;\n\n&lt;operator_chain&gt; ::= &lt;operator_invocation&gt;\n                   | &lt;operator_invocation&gt; \"_of_\" &lt;operator_chain&gt;\n\n&lt;operator_invocation&gt; ::= curl|divergence|time_derivative|gradient|laplacian|normalized|magnitude\n                        | derivative_with_respect_to_{coord}\n                        | derivative  ; (generic; disfavoured unless qualified)\n\n; Vector results exclude scalarizing terminals at the tail.\n&lt;derived_vector_name&gt; ::= &lt;vector_producing_chain&gt; \"_of_\" &lt;vector_name&gt;\n                        | &lt;vector_producing_chain&gt; \"_of_\" &lt;derived_vector_name&gt;\n&lt;vector_producing_chain&gt; ::= (curl|time_derivative|gradient|laplacian|normalized|derivative_with_respect_to_{coord}|derivative)\n                           | (curl|time_derivative|gradient|laplacian|normalized|derivative_with_respect_to_{coord}|derivative) \"_of_\" &lt;vector_producing_chain&gt;\n\n&lt;derived_scalar_name&gt; ::= &lt;scalarizing_chain&gt; \"_of_\" &lt;vector_name&gt;\n                        | &lt;scalarizing_chain&gt; \"_of_\" &lt;derived_vector_name&gt;\n                        | &lt;vector_name&gt; \"_magnitude\"\n                        | &lt;vector_name&gt; \"_\" &lt;subset&gt; \"_magnitude\"\n\n&lt;scalarizing_chain&gt; ::= (divergence|magnitude|curl_magnitude|normalized_magnitude)\n                      | (divergence|magnitude|curl_magnitude|normalized_magnitude) \"_of_\" &lt;vector_producing_chain&gt;\n\n&lt;subset&gt; ::= poloidal|toroidal|radial|parallel|perpendicular1|perpendicular2|x|y|z|&lt;word&gt;\n</code></pre> <p>Authoritative grammar and code generation:</p> <ul> <li>The canonical grammar, segment order, and vocabularies are defined in <code>imas_standard_names/resources/grammar.yml</code>.</li> <li>In the suffix order, <code>in_&lt;basis&gt;_basis</code> precedes <code>of_&lt;target&gt;</code> and <code>at_&lt;position&gt;</code>. <code>of_&lt;target&gt;</code> (geometry) and <code>at_&lt;position&gt;</code> (position) are mutually exclusive and draw from the same vocabulary; they appear adjacent in the grammar.</li> <li>The Python enums and segment metadata in <code>imas_standard_names/grammar/types.py</code> are auto-generated from this YAML during build/install (via Hatch). You can regenerate manually with <code>python -m imas_standard_names.grammar_codegen.generate</code> or the <code>build-grammar</code> script configured in <code>pyproject.toml</code>.</li> </ul> <p>Enforce semantic rank rules (Section 7); grammar alone is insufficient.</p>"},{"location":"specification/#7-operator-rank-semantics","title":"7. Operator Rank Semantics","text":"Operator Input Rank Output Rank Components? Notes curl vector vector yes 3D frames only. divergence vector scalar no No components. time_derivative scalar/vector same yes Chainable. gradient scalar vector yes If input not scalar \u2192 invalid. laplacian scalar scalar no On vector \u2192 vector (component\u2011wise). normalized vector vector yes Requires nonzero magnitude. magnitude vector scalar no Appears at tail. derivativewith_respect_to{coord} any same yes {coord} from dataset. <p>Disallowed chains: e.g. <code>curl_of_divergence_of_...</code> (scalar \u2192 curl invalid).</p>"},{"location":"specification/#8-validation-invariants","title":"8. Validation Invariants","text":"Code name (for tooling) Rule VEC001 A vector file must list &gt;=2 distinct axes. VEC002 All component names referenced exist. VEC003 Each component follows uniform pattern <code>&lt;axis&gt;_component_of_...</code>. OPR001 Operator chain obeys rank transitions. OPR002 Scalarizing operator cannot precede a vector\u2011producing operator. MAG001 <code>&lt;vector&gt;_magnitude</code> depends on every base component once. SUB001 <code>&lt;subset&gt;_magnitude</code> subset \u2286 frame axes. AXS001 Axis tokens must appear in frame file. DRP001 No legacy suffix pattern detected. DIAG001 No hard-coded instrument indices inside diagnostic quantity names."},{"location":"specification/#9-authoring-workflow-summary","title":"9. Authoring Workflow (Summary)","text":"<ol> <li>Define / reuse frame (see <code>frames/</code>).</li> <li>Create vector file with axes + magnitude field (recommended).</li> <li>Create one component file per axis (uniform pattern).</li> <li>Add derived vectors (curl etc.) + their component sets.</li> <li>Add derived scalars (divergence, magnitude if not already).</li> <li>Run validator: <code>validate_catalog resources/standard_names</code> (or <code>python -m imas_standard_names.validation.cli validate_catalog resources/standard_names</code>).</li> <li>Commit on green.</li> </ol> <p>Extended quick start: see <code>quickstart.md</code>.</p>"},{"location":"specification/#10-antipatterns","title":"10. Anti\u2011Patterns","text":"Invalid Reason Correct <code>magnetic_field_radial_component</code> Legacy suffix style <code>radial_component_of_magnetic_field</code> <code>curl_of_magnetic_field_radial_component</code> Ambiguous (curl of scalar) <code>radial_component_of_curl_of_magnetic_field</code> <code>gradient_of_magnetic_field</code> Gradient needs scalar operand (none) or <code>gradient_of_electron_temperature</code> <code>magnitude_of_magnetic_field_magnitude</code> Double magnitude (invalid) <code>magnitude_of_magnetic_field</code>"},{"location":"specification/#11-future-extensions-tbd","title":"11. Future Extensions (TBD)","text":"<ul> <li>Tensor ranks (<code>kind: tensor</code> with index list).</li> <li>Frame transformations.</li> <li>Normalized variants with explicit dependency tracking.</li> </ul>"},{"location":"specification/#12-appendix-quick-regex-hints","title":"12. Appendix: Quick Regex Hints","text":"<p>Below are illustrative (not normative) patterns. Escape and extend as needed.</p> <ul> <li>Component:</li> <li><code>^(radial|toroidal|vertical|poloidal|parallel|perpendicular1|perpendicular2|x|y|z)_component_of_[a-z0-9_]+(_of_[a-z0-9_]+)*$</code></li> <li>Vector:</li> <li><code>^[a-z][a-z0-9_]*$</code></li> <li>Derived Vector:</li> <li><code>^(curl|time_derivative|laplacian|normalized|derivative_with_respect_to_[a-z0-9_]+|derivative)_of_[a-z0-9_]+(_of_[a-z0-9_]+)*$</code></li> <li>Magnitude:</li> <li><code>^[a-z0-9_]+_magnitude$</code></li> <li>Scalarizing Op:</li> <li><code>^(divergence|magnitude|curl_magnitude|normalized_magnitude)_of_.*$</code></li> </ul> <p>Always combine regex checks with semantic rank validation.</p> <p>End of initial specification skeleton.</p>"},{"location":"specification/#13-extended-scalar-author-guidance","title":"13. Extended Scalar Author Guidance","text":"<p>See also the dedicated Style Guide (<code>style-guide.md</code>) for a broader set of rules, anti-patterns, submission checklist, and equilibrium attribute conventions.</p> <p>While much of this specification emphasizes vectors (to pin down the uniform component grammar), the majority of entries will remain plain scalars. This section provides explicit scalar guidelines.</p>"},{"location":"specification/#111-base-scalars","title":"11.1 Base Scalars","text":"<p>Pattern: <code>&lt;descriptive_terms&gt;</code> (lowercase, underscores). Avoid:</p> <ul> <li>Frame or coordinate hints (put those in metadata or dataset coordinates).</li> <li>Acquisition method (prefer a future <code>method</code> tag or link).</li> <li>Redundant words like <code>value</code>, <code>data</code>, <code>measurement</code>.</li> </ul> <p>Examples:</p> <ul> <li><code>electron_temperature</code></li> <li><code>ion_density</code></li> <li><code>total_radiated_power</code></li> </ul>"},{"location":"specification/#112-derived-scalars-from-scalars","title":"11.2 Derived Scalars from Scalars","text":"<p>Apply operator prefix chain: <code>time_derivative_of_</code>, <code>laplacian_of_</code>, etc. Example: <code>time_derivative_of_electron_temperature</code>.</p>"},{"location":"specification/#113-derived-scalars-from-vectors","title":"11.3 Derived Scalars from Vectors","text":"<p>Scalarizing operators over vectors: <code>divergence_of_&lt;vector_expression&gt;</code>, <code>magnitude_of_&lt;vector_expression&gt;</code> (canonical form <code>&lt;vector_expression&gt;_magnitude</code>). We prefer the suffix form <code>_magnitude</code> ONLY for the final tail; no <code>magnitude_of_</code> prefix variant is added.</p>"},{"location":"specification/#114-gradients","title":"11.4 Gradients","text":"<p><code>gradient_of_&lt;scalar&gt;</code> is a vector (kind: derived*vector). Do not create a scalar <code>gradient_of*\\*</code> entry; instead generate its components.</p>"},{"location":"specification/#115-time-derivatives","title":"11.5 Time Derivatives","text":"<p>Always prefix: <code>time_derivative_of_&lt;name&gt;</code>; chainable with other operators: <code>time_derivative_of_divergence_of_plasma_velocity</code>.</p>"},{"location":"specification/#116-antipatterns-scalars","title":"11.6 Anti\u2011Patterns (Scalars)","text":"Invalid Reason Correct <code>electron_temperature_time_derivative</code> Suffix style conflicts with uniform grammar <code>time_derivative_of_electron_temperature</code> <code>magnetic_field_magnitude</code> Deprecated legacy magnitude suffix <code>magnitude_of_magnetic_field</code> <code>gradient_of_electron_temperature_radial_component</code> Gradient raises rank (vector) <code>radial_component_of_gradient_of_electron_temperature</code>"},{"location":"specification/#117-minimal-yaml-templates","title":"11.7 Minimal YAML Templates","text":"<p>Base scalar:</p> <pre><code>name: electron_temperature\nkind: scalar\nunit: keV\ndescription: Electron temperature.\nstatus: draft\n</code></pre> <p>Derived scalar (time derivative):</p> <pre><code>name: time_derivative_of_electron_temperature\nkind: derived_scalar\nunit: keV.s^-1\nderivation:\n    operator_chain:\n        - operator: time_derivative\n            operand: electron_temperature\ndependencies:\n    - electron_temperature\nstatus: draft\n</code></pre> <p>Derived scalar (divergence of vector):</p> <pre><code>name: divergence_of_plasma_velocity\nkind: derived_scalar\nunit: s^-1\nparent_operation:\n  operator: divergence\n  operand_vector: plasma_velocity\ndependencies:\n  - radial_component_of_plasma_velocity\n  - toroidal_component_of_plasma_velocity\n  - vertical_component_of_plasma_velocity\nstatus: draft\n</code></pre>"},{"location":"specification/#118-validation-hooks-scalars","title":"11.8 Validation Hooks (Scalars)","text":"<p>Future validator extensions will ensure:</p> <ul> <li>Derived scalar dependency closure.</li> <li>No misuse of <code>gradient_of_</code> as scalar.</li> <li>Consistent unit transformations where operator implies dimensions.</li> </ul>"},{"location":"standard_name_generation_prompt/","title":"Standard name generation prompt","text":""},{"location":"standard_name_generation_prompt/#reusable-prompt-template-imas-standard-name-batch-generation","title":"Reusable Prompt Template: IMAS Standard Name Batch Generation","text":"<p>Purpose: Drive an LLM (or MCP-enabled agent) to propose VALID new IMAS Standard Names (scalars, vectors, components, derived scalars/vectors) that:</p> <ol> <li>Obey repository specification (<code>docs/specification.md</code>) &amp; style guide (<code>docs/style-guide.md</code>).</li> <li>Pass current Pydantic model validators in <code>imas_standard_names/models.py</code> (notably the stricter magnitude naming rule).</li> <li>Produce per\u2011entry YAML conforming to existing examples in <code>standard_names/magnetic_field/</code>.</li> <li>Derive names from the IMAS Data Dictionary (IMAS DD) via MCP server queries when available (see <code>imas_standard_names/name_generator.py</code>).</li> <li>Support optional domain grouping (e.g. equilibrium, diagnostics, geometry) and IMAS IDS scoping.</li> </ol> <p>NOTE \u2013 Temporary divergence: The documentation (spec/style) treats <code>&lt;vector&gt;_magnitude</code> as canonical. The current Pydantic validator REQUIRES the magnitude scalar name form <code>magnitude_of_&lt;vector&gt;</code> (vector entry must reference this name via its <code>magnitude</code> field) and rejects <code>&lt;vector&gt;_magnitude</code>. Until harmonized, this template defaults to validator\u2011safe prefix form. A switch (<code>magnitude_style</code>) allows choosing either.</p>"},{"location":"standard_name_generation_prompt/#1-parameter-block-fill-or-leave-defaults","title":"1. Parameter Block (Fill or Leave Defaults)","text":"<pre><code>{task_mode: generate|extend|refine}\n{domain_group: equilibrium|diagnostics|geometry|plasma_state|transport|generic|mixed}\n{imas_ids_scope: list of IDS names or 'auto'}\n{exclude_ids: optional list}\n{max_base_scalars: 25}\n{vector_ratio: 0.2}  # approximate fraction of total proposals that are base vectors\n{include_derived_vectors: true}\n{include_scalar_derivatives: time_derivative, divergence, magnitude, curl (if valid), gradient}\n{allowed_axes: radial,toroidal,vertical}  # extend if frame registry updated\n{frame_name: cylindrical_r_tor_z}  # or other registered frame\n{magnitude_style: prefix|suffix}  # prefix =&gt; magnitude_of_&lt;vector&gt;; suffix =&gt; &lt;vector&gt;_magnitude\n{units_policy: infer|explicit|placeholder}\n{description_length_max: 120}\n{status: draft}\n{batch_size: 10}  # number of *new* base scalars per batch before expansion\n{batches: 2}\n{novelty_check: true}  # cross-check against docs/generic_names.csv + already generated set\n{emit_validation_report: true}\n{output_format: yaml}  # one YAML block per file candidate\n{yaml_fields_min: name,kind,unit,status,description}\n{yaml_fields_full: name,kind,unit,status,description,frame,components,magnitude,axis,parent_vector,parent_operation,derivation,tags}\n{dependency_expansion: full}  # include all component dependencies for derived scalars\n{reject_patterns: [\"__\", \"magnitude_of_.*_magnitude\"]}\n{strict_semantics: true}  # enforce operator rank rules from spec \u00a77\n</code></pre>"},{"location":"standard_name_generation_prompt/#2-high-level-workflow-agent-should-follow-exactly","title":"2. High-Level Workflow (Agent Should Follow Exactly)","text":"<ol> <li> <p>Harvest Domain Signals</p> </li> <li> <p>If <code>imas_ids_scope=auto</code>, query MCP IMAS server: \"List IDS and key physical fields for {domain_group}.\" Collect candidate physical quantities (prefer scalars).</p> </li> <li> <p>Normalize raw IMAS DD field labels to lowercase underscore tokens (strip units, indices, device IDs).</p> </li> <li> <p>Filter &amp; Classify</p> </li> <li> <p>Remove generic or disallowed names (see <code>docs/generic_names.csv</code>).</p> </li> <li>Discard names violating lexical rules (style guide \u00a72) or containing axis tokens unnecessarily.</li> <li> <p>Classify into potential base scalars vs. inherent vectors (rare \u2013 only if naturally multi-component, e.g. magnetic_field, plasma_velocity).</p> </li> <li> <p>Propose Base Scalars (Batch Loop)    For each batch (size = <code>batch_size</code>, up to <code>batches</code>):</p> </li> <li> <p>Select the most domain-relevant unmodeled physical quantities.</p> </li> <li>Ensure uniqueness against earlier batches.</li> <li> <p>Output YAML entries (kind: scalar, status: draft, concise description). Units: infer from physics (SI; conform to style guide \u00a78). If unknown, choose placeholder consistent with dimension (e.g. <code>1</code> for dimensionless) ONLY if <code>units_policy != infer</code>.</p> </li> <li> <p>Introduce Vectors</p> </li> <li> <p>From chosen scalar set identify groups that represent components of a coherent physical vector (must have &gt;=2 axes from <code>allowed_axes</code>). If missing components, propose new scalar component names using pattern <code>&lt;axis&gt;_component_of_&lt;vector_expression&gt;</code> but keep them as separate scalar entries.</p> </li> <li> <p>Emit vector YAML with: <code>kind: vector</code>, <code>frame</code>, <code>components</code> mapping, <code>magnitude</code> (validator form: <code>magnitude_of_&lt;vector&gt;</code> if <code>magnitude_style=prefix</code>, else <code>&lt;vector&gt;_magnitude</code>). Do NOT add derived vectors yet.</p> </li> <li> <p>Derived Scalars (From Vectors)</p> </li> <li> <p>For each vector, if appropriate: propose magnitude scalar (style conditional), divergence (if frame + physics meaningful), optionally time derivatives, normalized variants (future \u2013 skip if uncertain).</p> </li> <li> <p>Derived scalar YAML must include either <code>parent_operation</code> (operator + operand_vector) or <code>derivation</code> with <code>expression</code> + <code>dependencies</code> (see <code>magnetic_field_magnitude.yml</code> example but ADAPT name to validator form if prefix style in effect).</p> </li> <li> <p>Derived Vectors</p> </li> <li> <p>Apply rank-valid operators (spec \u00a77): gradient(scalar) \u2192 vector, curl(vector) \u2192 vector (only if 3D valid), time_derivative maintains rank.</p> </li> <li>Chain left-to-right: outermost first (style guide \u00a75). Stop once scalarizing operator used.</li> <li> <p>Each derived vector: <code>kind: derived_vector</code>, <code>parent_operation</code> {operator, operand_vector}, full <code>components</code> set, optional magnitude.</p> </li> <li> <p>Dependency &amp; Consistency Pass</p> </li> <li> <p>Every component scalar lists <code>axis</code> + <code>parent_vector</code>.</p> </li> <li>Vector lists all component names (must already be defined as scalar or derived_scalar).</li> <li>Derived scalar with magnitude or divergence lists dependencies = ALL base component names of parent vector.</li> <li> <p>Enforce rejection: no <code>curl_of_divergence_*</code>, no double magnitude, no legacy suffix derivatives.</p> </li> <li> <p>Magnitude Naming Switch</p> </li> <li> <p>If <code>magnitude_style=prefix</code>: Use ONLY <code>magnitude_of_&lt;vector&gt;</code>; disallow <code>&lt;vector&gt;_magnitude</code>.</p> </li> <li> <p>If <code>magnitude_style=suffix</code>: Use ONLY <code>&lt;vector&gt;_magnitude</code>; set vector <code>magnitude</code> field to that name (NOTE: this will FAIL current Pydantic model; supply a warning comment line in output). Default is <code>prefix</code> to pass validators.</p> </li> <li> <p>Validation Simulation (Pre-Flight)    For each proposed YAML entry, conceptually check:</p> </li> <li> <p><code>name</code> regex: <code>^[a-z][a-z0-9_]*$</code>, no <code>__</code> (models.py &amp; style \u00a72).</p> </li> <li>Component naming: <code>&lt;axis&gt;_component_of_...</code> with axis in allowed set.</li> <li>Vector magnitude reference matches chosen magnitude style.</li> <li>Derived kinds specify <code>derivation</code> or <code>parent_operation</code> (models.py rule).</li> <li>No deprecated magnitude suffix (if prefix mode active).</li> <li> <p>Operator rank transitions valid (spec \u00a77).</p> </li> <li> <p>Emission Order     Output blocks grouped logically:</p> </li> <li>Base scalars</li> <li>Component scalars</li> <li>Vectors</li> <li>Derived vectors</li> <li> <p>Derived scalars (magnitude/divergence/etc.)     Provide an index summary at end (name \u2192 kind).</p> </li> <li> <p>Post-Step Guidance (Optional)     Suggest running locally: <code>validate_catalog resources/standard_names</code> (or <code>python -m imas_standard_names.validation.cli validate_catalog resources/standard_names</code>) and (future) loading with Pydantic models to confirm.</p> </li> </ol>"},{"location":"standard_name_generation_prompt/#3-yaml-field-templates","title":"3. YAML Field Templates","text":"<p>Base Scalar Template:</p> <pre><code>name: &lt;base_scalar&gt;\nkind: scalar\nunit: &lt;SI_or_1&gt;\nstatus: draft\ndescription: &lt;Concise (&lt;=120 chars) description sentence or fragment&gt;\n</code></pre> <p>Component Scalar Template:</p> <pre><code>name: &lt;axis&gt;_component_of_&lt;vector_expression&gt;\nkind: scalar\nunit: &lt;same as vector&gt;\naxis: &lt;axis&gt;\nparent_vector: &lt;vector_name&gt;\nstatus: draft\ndescription: &lt;Axis capitalized&gt; component of &lt;vector_name&gt;.\n</code></pre> <p>Vector Template (validator-compatible magnitude):</p> <pre><code>name: &lt;vector_name&gt;\nkind: vector\nframe: &lt;frame_name&gt;\nunit: &lt;SI&gt;\ncomponents:\n  radial: radial_component_of_&lt;vector_name&gt;\n  toroidal: toroidal_component_of_&lt;vector_name&gt;\n  vertical: vertical_component_of_&lt;vector_name&gt;\nmagnitude: magnitude_of_&lt;vector_name&gt;\nstatus: draft\ndescription: &lt;Vector description in frame&gt;.\n</code></pre> <p>Magnitude Scalar (prefix style \u2013 RECOMMENDED for current validators):</p> <pre><code>name: magnitude_of_&lt;vector_name&gt;\nkind: derived_scalar\nunit: &lt;SI&gt;\nparent_vector: &lt;vector_name&gt;\nderivation:\n  expression: |\n    sqrt(&lt;radial_component&gt;^2 + &lt;toroidal_component&gt;^2 + &lt;vertical_component&gt;^2)\n  dependencies:\n    - &lt;radial_component&gt;\n    - &lt;toroidal_component&gt;\n    - &lt;vertical_component&gt;\nstatus: draft\ndescription: Magnitude of &lt;vector_name&gt;.\n</code></pre> <p>Derived Vector (example: time derivative):</p> <pre><code>name: time_derivative_of_&lt;vector_name&gt;\nkind: derived_vector\nframe: &lt;frame_name&gt;\nunit: &lt;SI&gt;\nparent_operation:\n  operator: time_derivative\n  operand_vector: &lt;vector_name&gt;\ncomponents:\n  radial: radial_component_of_time_derivative_of_&lt;vector_name&gt;\n  toroidal: toroidal_component_of_time_derivative_of_&lt;vector_name&gt;\n  vertical: vertical_component_of_time_derivative_of_&lt;vector_name&gt;\nmagnitude: magnitude_of_time_derivative_of_&lt;vector_name&gt;\nstatus: draft\ndescription: Time derivative of &lt;vector_name&gt;.\n</code></pre> <p>Derived Scalar (divergence):</p> <pre><code>name: divergence_of_&lt;vector_name&gt;\nkind: derived_scalar\nunit: s^-1\nparent_operation:\n  operator: divergence\n  operand_vector: &lt;vector_name&gt;\nderivation:\n  expression: &lt;leave empty or future analytic form&gt;\n  dependencies:\n    - &lt;radial_component&gt;\n    - &lt;toroidal_component&gt;\n    - &lt;vertical_component&gt;\nstatus: draft\ndescription: Divergence of &lt;vector_name&gt;.\n</code></pre> <p>Gradient (scalar \u2192 derived vector) example:</p> <pre><code>name: gradient_of_&lt;scalar_name&gt;\nkind: derived_vector\nframe: &lt;frame_name&gt;\nunit: &lt;scalar_unit&gt;.m^-1 # adjust dimensionally\nparent_operation:\n  operator: gradient\n  operand_vector: &lt;scalar_name&gt; # logically a scalar operand; retained field name for consistency\ncomponents:\n  radial: radial_component_of_gradient_of_&lt;scalar_name&gt;\n  toroidal: toroidal_component_of_gradient_of_&lt;scalar_name&gt;\n  vertical: vertical_component_of_gradient_of_&lt;scalar_name&gt;\nmagnitude: magnitude_of_gradient_of_&lt;scalar_name&gt;\nstatus: draft\ndescription: Gradient of &lt;scalar_name&gt;.\n</code></pre>"},{"location":"standard_name_generation_prompt/#4-operator-rank-constraints-enforce-during-generation","title":"4. Operator Rank Constraints (Enforce During Generation)","text":"<p>From spec \u00a77 (summarized):</p> <ul> <li>curl(vector) \u2192 vector (3D only)</li> <li>divergence(vector) \u2192 scalar (terminal)</li> <li>gradient(scalar) \u2192 vector</li> <li>magnitude(vector) \u2192 scalar (terminal)</li> <li>time_derivative(scalar|vector) \u2192 same rank (chainable)</li> <li>laplacian(scalar) \u2192 scalar; laplacian(vector) \u2192 vector (component-wise)   Invalid chains examples: <code>curl_of_divergence_of_*</code>, double magnitude, scalar input to gradient.</li> </ul> <p>Algorithmic check pseudo\u2011rules:</p> <ol> <li>Parse left-to-right tokens split by <code>_of_</code> where token \u2208 operator set.</li> <li>Track current rank (scalar|vector). Reject illegal transitions.</li> <li>If scalarizing operator (divergence|magnitude|curl_magnitude|normalized_magnitude) encountered, no further vector-producing operator may follow.</li> </ol>"},{"location":"standard_name_generation_prompt/#5-validation-checklist-pre-emit-for-each-entry","title":"5. Validation Checklist (Pre-Emit for Each Entry)","text":"Check Rule Source Name pattern models.py <code>validate_name</code> + style guide \u00a72 No double underscores models.py Vector has &gt;=2 components models.py structural_rules Component pattern matches axis + <code>_component_of_</code> spec \u00a73 / validator script Component scalar kind is scalar / derived_scalar models.py Derived kinds have derivation or parent_operation models.py Magnitude naming matches <code>magnitude_style</code> models.py vs. spec Dependencies complete (all base components) validator script MAGNITUDE check No forbidden chains spec \u00a77 / style guide \u00a75 Description length &lt;= limit parameter <code>description_length_max</code>"},{"location":"standard_name_generation_prompt/#6-emission-format","title":"6. Emission Format","text":"<p>Return final answer as:</p> <pre><code>---\n# Batch 1: Base Scalars\n&lt;YAML entries&gt;\n---\n# Batch 1: Expanded (Vectors, Components, Derived)\n&lt;YAML entries&gt;\n---\n# Batch 2: ...\n...\n---\n# Index\n&lt;tabular summary or markdown list&gt;\n---\n# Validation Report\n&lt;summary of simulated passes/failures (expect all pass)&gt;\n</code></pre> <p>If <code>emit_validation_report=false</code>, omit last section.</p>"},{"location":"standard_name_generation_prompt/#7-prompt-assembly-template-copy-use","title":"7. Prompt Assembly Template (Copy &amp; Use)","text":"<p>Paste the following to drive generation (fill the parameter block first):</p> <pre><code>SYSTEM:\nYou are an IMAS Standard Name authoring assistant. You MUST emit only validator-compliant YAML proposals unless explicitly instructed to show diagnostics. Follow repository specification (docs/specification.md) &amp; style (docs/style-guide.md). Prefer prefix magnitude naming (magnitude_of_&lt;vector&gt;) unless `magnitude_style=suffix` is set.\n\nUSER PARAMETERS:\n{&lt;insert filled parameter block&gt;}\n\nTASK:\n1. Execute the High-Level Workflow steps 1\u201311.\n2. For IMAS DD mining request concise structured data (list field \u2192 physical meaning \u2192 suggested base scalar name candidate). If unavailable, proceed with physics-informed assumptions for {domain_group}.\n3. Generate up to {max_base_scalars} new base scalars (over {batches} batch(es)).\n4. Expand into vectors, components, derived entities respecting operator rank.\n5. Provide YAML entries (one logical item per block) in required order.\n6. Include dependency lists for derived scalars using ALL component names.\n7. Produce a validation report summarizing any detected risk or uncertainty.\n8. Do NOT duplicate existing canonical examples (magnetic_field family) unless extending with new derived forms legitimately.\n\nOUTPUT STRICTLY:\n- Valid YAML blocks only (no extraneous prose inside blocks) preceded by comment headers as defined in Emission Format.\n- After YAML sections, include an Index and optional Validation Report.\n\nIf any rule conflicts (e.g. spec vs. current validators on magnitude naming), prefer validator compliance and note the divergence in the Validation Report.\n</code></pre>"},{"location":"standard_name_generation_prompt/#8-example-minimal-invocation-narrative-only","title":"8. Example Minimal Invocation (Narrative Only)","text":"<p>domain_group: equilibrium; imas_ids_scope: equilibrium; max_base_scalars: 5; vector_ratio: 0.2; include_derived_vectors: true; include_scalar_derivatives: time_derivative,magnitude,divergence; magnitude_style: prefix.</p> <p>Agent would: mine IDS \u2192 propose scalars like <code>plasma_current</code>, <code>poloidal_flux</code> (already exists? then skip), etc., then decide if a new vector (e.g. <code>plasma_velocity</code>) merits introduction, generate components + derived scalars.</p>"},{"location":"standard_name_generation_prompt/#9-future-adjustments","title":"9. Future Adjustments","text":"<p>Once code &amp; docs converge on magnitude naming, remove <code>magnitude_style</code> switch and always use suffix <code>&lt;vector&gt;_magnitude</code> while updating <code>models.py</code> accordingly.</p> <p>End of reusable prompt template.</p>"},{"location":"style-guide/","title":"Standard Names Style Guide","text":"<p>Status: draft (initial) \u2013 complements the formal grammar in <code>specification.md</code>.</p> <p>Purpose: Provide concise, actionable rules for authors proposing new standard names (scalars, vectors, geometry, diagnostics) and writing supporting YAML metadata.</p> <p>Provenance block structure is documented in <code>provenance.md</code>.</p> <p>Use the IMAS MCP server (configured in <code>.vscode/mcp.json</code> under id <code>imas</code>) to harvest existing IMAS Data Dictionary information before drafting new names. Align proposals with real data.</p>"},{"location":"style-guide/#1-core-principles-recap","title":"1. Core Principles (Recap)","text":"<ol> <li>Uniform component pattern: <code>&lt;axis&gt;_component_of_&lt;vector_expression&gt;</code>.</li> <li>Left-to-right operator chains: <code>time_derivative_of_curl_of_magnetic_field</code>.</li> <li>Scalars are atomic; vectors aggregate semantics only.</li> <li>One canonical spelling (no alternate alias field).</li> <li>Deterministic parsing &gt; brevity.</li> </ol>"},{"location":"style-guide/#2-lexical-rules","title":"2. Lexical Rules","text":"Rule Requirement Characters Lowercase a\u2013z, digits 0\u20139, underscores. Start Must begin with a letter. No Double underscores (<code>__</code>), trailing underscore, camelCase, hyphens. Pluralization Use singular unless the concept is inherently plural (<code>coefficients</code> rarely justified \u2013 prefer specific noun like <code>spectral_density</code>). Abbreviations Avoid unless universally canonical (e.g. <code>pf</code> for poloidal field coil if documented). Prefer full words first time in domain. Numbers Use plain digits without zero padding unless ordering benefits. <p>Reserved tokens (internal meaning \u2013 do not repurpose): <code>component</code>, <code>of</code>, <code>time_derivative</code>, <code>curl</code>, <code>divergence</code>, <code>gradient</code>, <code>laplacian</code>, <code>normalized</code>, <code>magnitude</code>, <code>derivative_with_respect_to</code>.</p>"},{"location":"style-guide/#3-scalar-naming","title":"3. Scalar Naming","text":"Category Guidance Example Base physical Direct phenomenon noun(s) <code>electron_temperature</code> Time derivative Prefix chain <code>time_derivative_of_electron_temperature</code> Gradient (vector) Use derived vector rules (produces vector + components) <code>gradient_of_electron_temperature</code> Scalar from vector Use scalarizing operator OR canonical magnitude prefix <code>divergence_of_magnetic_field</code> Magnitude (scalar) ALWAYS <code>magnitude_of_&lt;vector_expression&gt;</code> (canonical; no suffix) <code>magnitude_of_magnetic_field</code> No frame terms Omit coordinate hints (unless intrinsic landmark like axis) (avoid) <code>electron_temperature_radial</code> <p>Canonical Magnitude Policy: The legacy suffix form <code>&lt;vector&gt;_magnitude</code> is deprecated. New entries MUST adopt <code>magnitude_of_&lt;vector_expression&gt;</code>; tooling will flag suffix usage (DRP001).</p> <p>Anti-patterns: <code>electron_temperature_time_derivative</code> (suffix derivative), <code>magnetic_field_magnitude</code> (legacy magnitude suffix), <code>gradient_of_electron_temperature_radial_component</code> (rank misuse).</p>"},{"location":"style-guide/#4-vector-naming","title":"4. Vector Naming","text":"Aspect Rule Example Base vector Single descriptive phrase <code>magnetic_field</code> Derived vector <code>&lt;operator&gt;_of_&lt;vector_expression&gt;</code> <code>curl_of_magnetic_field</code> Components <code>&lt;axis&gt;_component_of_&lt;vector_expression&gt;</code> <code>radial_component_of_magnetic_field</code> Magnitude scalar Scalar name: <code>magnitude_of_&lt;vector_expression&gt;</code> <code>magnitude_of_magnetic_field</code> No container suffix Never append <code>_vector</code> (avoid) <code>magnetic_field_vector</code> Axis list Must exist in frame YAML <code>cylindrical_r_tor_z</code> <p>Allowed canonical axes (Phase 1): <code>radial</code>, <code>toroidal</code>, <code>vertical</code> (others reserved until frame registry expands).</p>"},{"location":"style-guide/#5-operator-chain-construction","title":"5. Operator Chain Construction","text":"<ol> <li>Compose strictly left-to-right: outermost operation first.</li> <li>Stop after scalarizing operator if output is scalar.</li> <li>Disallow vector operator after scalarizing operator (e.g. <code>curl_of_divergence_of_*</code>).</li> <li>Use <code>derivative_with_respect_to_&lt;coord&gt;</code> for explicit coordinate derivatives (future validator will confirm coordinate variable existence).</li> </ol> <p>Examples: Good | Reason ---- | ------ <code>time_derivative_of_curl_of_magnetic_field</code> | Vector\u2192vector\u2192vector chain <code>divergence_of_time_derivative_of_magnetic_field</code> | Chain ends in scalar Bad | Issue --- | ----- <code>curl_of_divergence_of_magnetic_field</code> | Curl after scalar <code>magnitude_of_magnetic_field_magnitude</code> | Double magnitude</p>"},{"location":"style-guide/#6-equilibrium-reconstruction-phase-1-style","title":"6. Equilibrium Reconstruction (Phase 1) Style","text":"<p>| Element               | Style Rule                                                                                                   | Example                                   | | --------------------- | ------------------------------------------------------------------------------------------------------------ | ----------------------------------------- | -------------------------------------------- | | Coil current          | <code>pf_coil_&lt;id&gt;_current</code> (ampere)                                                                              | <code>pf_coil_1_current</code>                       | | Coil position         | Add coordinate token: <code>_radial_position</code>, <code>_vertical_position</code>, <code>_toroidal_angle</code>                            | <code>pf_coil_1_radial_position</code>               | | Probe field component | Use physical orientation nouns: <code>_normal_field</code>, <code>_tangential_field</code> (no instrument number in standard name) | <code>magnetic_probe_normal_field</code>             | | Probe position        | Same coordinate suffix set as coils (avoid embedding numeric ids)                                            | <code>magnetic_probe_vertical_position</code>        | | Flux loop flux        | <code>_poloidal_flux</code>                                                                                             | <code>flux_loop_5_poloidal_flux</code>               | | Axis position         | <code>magnetic_axis_radial_position</code>, <code>magnetic_axis_vertical_position</code>                                           | (both)                                    | | Boundary outlines     | <code>&lt;structure&gt;_outline_&lt;radial                                                                                 | vertical&gt;\\_coordinates</code>                   | <code>plasma_boundary_outline_radial_coordinates</code> | | Wall outlines         | Same pattern with <code>first_wall</code>                                                                               | <code>first_wall_outline_vertical_coordinates</code> | | Maps                  | Use quantity base name (unqualified) \u2013 grid metadata external                                                | <code>poloidal_flux</code>                           |</p> <p>Notes:</p> <ul> <li>Indices <code>&lt;id&gt;</code> should be numeric unless a facility-specific code name adds value (document if used).</li> <li>Outline arrays will later be wrapped by geometry containers; keep names stable.</li> </ul>"},{"location":"style-guide/#7-geometry-coordinate-arrays","title":"7. Geometry &amp; Coordinate Arrays","text":"<p>Until geometry container metadata is formalized, coordinate arrays follow: <code>&lt;object&gt;_outline_&lt;axis&gt;_coordinates</code> with plural noun <code>coordinates</code>. Axis tokens MUST be consistent across both radial &amp; vertical arrays for the same outline.</p> <p>Future container fields (preview): <code>geometry_type</code>, <code>node_coordinates</code>, <code>part_node_count</code> (do not embed those in names).</p>"},{"location":"style-guide/#8-units-formatting","title":"8. Units Formatting","text":"Aspect Rule Example Base units SI symbols <code>T</code>, <code>A</code>, <code>m</code> Compound Use <code>.</code> for multiplication, <code>^</code> for powers or implicit <code>-1</code> exponent <code>T.m^-1</code> Per units Negative exponent (avoid slash chaining) <code>s^-1</code> (not <code>1/s</code>) Dimensionless Leave blank or use <code>1</code> (consistent) <code>1</code> Magnitude inherits Same as vector components <code>T</code> <p>Later unit validation will parse via Pint; keep forms Pint-friendly.</p>"},{"location":"style-guide/#9-descriptions","title":"9. Descriptions","text":"<p>Keep concise ( \u2264 120 chars ). Begin with capital, no trailing period if fragment; include period if full sentence. Include:</p> <ol> <li>Core physical meaning.</li> <li>If derived, the operator chain succinctly (\"Curl of magnetic_field.\").</li> <li>For components: axis first (\"Radial component of magnetic_field.\").</li> </ol> <p>Avoid repetition of the name itself beyond meaningful grammar.</p>"},{"location":"style-guide/#10-yaml-field-guidelines","title":"10. YAML Field Guidelines","text":"<p>| Field        | Requirement                                           | Example                                      | | ------------ | ----------------------------------------------------- | -------------------------------------------- | ---------- | ------------------------------- | ----- | | <code>name</code>       | Matches grammar exactly                               | <code>radial_component_of_magnetic_field</code>         | | <code>kind</code>       | One of scalar, derived_scalar, vector, derived_vector | <code>vector</code>                                     | | <code>frame</code>      | Required for vectors / derived vectors                | <code>cylindrical_r_tor_z</code>                        | | <code>components</code> | Mapping axis\u2192component for vectors                    | <code>radial: radial_component_of_magnetic_field</code> | | <code>magnitude</code>  | Scalar magnitude name (optional but recommended)      | <code>magnetic_field_magnitude</code>                   | | <code>provenance</code> | Structured provenance (operator / reduction / expr)   | operators: [curl]; base: magnetic_field      | | <code>unit</code>       | SI-consistent                                         | <code>T</code>                                          | | <code>status</code>     | draft                                                 | active                                       | deprecated | superseded (future enforcement) | draft |</p>"},{"location":"style-guide/#11-submission-checklist","title":"11. Submission Checklist","text":"<p>Before submitting an issue / PR:</p> <ul> <li>Name conforms to grammar (run validator).</li> <li>Vector has \u22652 components and magnitude defined (if sensible).</li> <li>Component files exist for each axis and backlink correctly.</li> <li>Derivation dependencies complete and free of cycles (manual check until Phase 4).</li> <li>Units consistent with physical dimension.</li> <li>Description concise and informative.</li> <li>No reserved tokens misused.</li> <li>Phase alignment: If equilibrium attribute, matches Phase 1 patterns.</li> </ul>"},{"location":"style-guide/#12-anti-pattern-matrix","title":"12. Anti-Pattern Matrix","text":"Bad Problem Correct <code>magnetic_field_radial_component</code> Reversed component order <code>radial_component_of_magnetic_field</code> <code>curl_of_divergence_of_magnetic_field</code> Curl after scalar (remove curl) or pick different chain <code>magnetic_field_magnitude</code> Legacy magnitude suffix (deprecated) <code>magnitude_of_magnetic_field</code> <code>electron_temperature_time_derivative</code> Suffix derivative <code>time_derivative_of_electron_temperature</code> <code>gradient_of_electron_temperature_radial_component</code> Gradient rank misuse <code>radial_component_of_gradient_of_electron_temperature</code> <code>pf_coil_current_1</code> Misplaced index <code>pf_coil_1_current</code> <code>first_wall_vertical_coordinates</code> Missing outline token <code>first_wall_outline_vertical_coordinates</code> <code>magnetic_probe_23_normal_field</code> Hard-coded instrument index (violates DIAG001) <code>magnetic_probe_normal_field</code>"},{"location":"style-guide/#13-reserved-planned-extensions","title":"13. Reserved / Planned Extensions","text":"Area Future Plan Geometry containers Introduce metadata-only variable linking outlines. Tensor quantities <code>kind: tensor</code> with index metadata &amp; symmetry. Lifecycle Enforce status transitions + alias deprecation warnings. Operator registry Machine-readable rank &amp; composition legality. Grid axes Standard names / attributes for 2D/3D analytical grids."},{"location":"style-guide/#14-quick-reference-copy-block","title":"14. Quick Reference (Copy Block)","text":"<pre><code>Vector pattern: &lt;vector&gt;\nComponent: &lt;axis&gt;_component_of_&lt;vector_expression&gt;\nDerived vector: &lt;operator&gt;_of_&lt;vector_expression&gt;\nMagnitude: magnitude_of_&lt;vector_expression&gt;\nTime derivative: time_derivative_of_&lt;target&gt;\nAxis tokens (Phase 1): radial, toroidal, vertical\nOutline coordinates: &lt;object&gt;_outline_&lt;axis&gt;_coordinates\nCoil current: pf_coil_&lt;id&gt;_current\nProbe field: magnetic_probe_&lt;normal|tangential&gt;_field\nFlux loop flux: flux_loop_&lt;id&gt;_poloidal_flux\nMagnetic axis: magnetic_axis_&lt;radial|vertical&gt;_position\n</code></pre> <p>End of style guide.</p>"}]}